<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.jetbrains.kotlin.android)&#10;    id(&quot;org.jetbrains.kotlin.plugin.compose&quot;) version &quot;2.0.0&quot;&#10;}&#10;&#10;android {&#10;    namespace 'com.myapp.climatscope'&#10;    compileSdk 35&#10;    buildFeatures {&#10;        buildConfig = true&#10;        compose = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.4&quot;&#10;    }&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.myapp.climatscope&quot;&#10;        minSdk 28&#10;        targetSdk 35&#10;        versionCode 6&#10;        versionCode 7&#10;        versionName &quot;1.6&quot;&#10;&#10;        Properties properties = new Properties()&#10;        properties.load(project.rootProject.file(&quot;local.properties&quot;).newDataInputStream())&#10;        buildConfigField &quot;String&quot;, &quot;API_KEY&quot;, &quot;\&quot;${properties.getProperty(&quot;API_KEY&quot;)}\&quot;&quot;&#10;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled false&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;        }&#10;    }&#10;    &#10;    compileOptions {&#10;        targetCompatibility JavaVersion.VERSION_17&#10;    }&#10;    &#10;        jvmTarget = '17'&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Jetpack Compose BOM&#10;    implementation platform(libs.androidx.compose.bom)&#10;    implementation libs.androidx.compose.ui&#10;&#10;    implementation libs.androidx.compose.ui.tooling.preview&#10;    implementation libs.androidx.compose.material3&#10;    implementation platform('androidx.compose:compose-bom:2023.10.01')&#10;    implementation 'androidx.compose.ui:ui'&#10;    implementation 'androidx.compose.ui:ui-tooling-preview'&#10;    implementation 'androidx.compose.material3:material3'&#10;    implementation 'androidx.activity:activity-compose:1.8.2'&#10;    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'&#10;    implementation 'androidx.navigation:navigation-compose:2.7.6'&#10;    implementation 'io.coil-kt:coil-compose:2.5.0'&#10;    // Architecture Components&#10;    implementation libs.androidx.lifecycle.viewmodel.ktx&#10;    implementation libs.androidx.lifecycle.livedata.ktx&#10;&#10;    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'&#10;    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'&#10;&#10;    // Network&#10;    implementation libs.retrofit&#10;    implementation libs.converter.gson&#10;    implementation libs.logging.interceptor&#10;    implementation libs.gson&#10;    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'&#10;    // Location Services&#10;    implementation libs.play.services.location&#10;    implementation libs.accompanist.permissions&#10;&#10;    // Testing&#10;    testImplementation libs.junit&#10;    androidTestImplementation libs.androidx.junit&#10;    androidTestImplementation libs.androidx.espresso.core&#10;    androidTestImplementation platform(libs.androidx.compose.bom)&#10;    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'&#10;    debugImplementation libs.androidx.compose.ui.tooling&#10;    debugImplementation libs.androidx.compose.ui.test.manifest&#10;    androidTestImplementation libs.androidx.compose.ui.test.junit4&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.compose.compiler)&#10;}&#10;&#10;android {&#10;    namespace 'com.myapp.climatscope'&#10;    compileSdk 35&#10;&#10;    buildFeatures {&#10;        buildConfig = true&#10;        compose = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.14&quot;&#10;    }&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.myapp.climatscope&quot;&#10;        minSdk 28&#10;        targetSdk 35&#10;        versionCode 6&#10;        versionName &quot;1.6&quot;&#10;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        Properties properties = new Properties()&#10;        properties.load(project.rootProject.file(&quot;local.properties&quot;).newDataInputStream())&#10;        buildConfigField &quot;String&quot;, &quot;API_KEY&quot;, &quot;\&quot;${properties.getProperty(&quot;API_KEY&quot;)}\&quot;&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled false&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_17&#10;        targetCompatibility JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = '17'&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Jetpack Compose BOM&#10;    implementation platform(libs.androidx.compose.bom)&#10;    implementation libs.androidx.compose.ui&#10;    implementation libs.androidx.compose.ui.tooling.preview&#10;    implementation libs.androidx.compose.material3&#10;    implementation libs.androidx.compose.activity&#10;    implementation libs.androidx.lifecycle.viewmodel.compose&#10;    implementation libs.androidx.navigation.compose&#10;    implementation 'androidx.compose.runtime:runtime-livedata'&#10;    implementation 'androidx.compose.material:material-icons-extended'&#10;&#10;    // Coil for Compose&#10;    implementation 'io.coil-kt:coil-compose:2.7.0'&#10;&#10;    // Architecture Components&#10;    implementation libs.androidx.lifecycle.viewmodel.ktx&#10;    implementation libs.androidx.lifecycle.livedata.ktx&#10;&#10;    // Coroutines&#10;    implementation libs.kotlinx.coroutines.android&#10;&#10;    // Network&#10;    implementation libs.retrofit&#10;    implementation libs.converter.gson&#10;    implementation libs.logging.interceptor&#10;    implementation libs.gson&#10;&#10;    // Location Services&#10;    implementation libs.play.services.location&#10;    implementation libs.accompanist.permissions&#10;&#10;    // Core Android&#10;    implementation libs.androidx.core.ktx&#10;    implementation libs.androidx.appcompat&#10;&#10;    // Testing&#10;    testImplementation libs.junit&#10;    androidTestImplementation libs.androidx.junit&#10;    androidTestImplementation libs.androidx.espresso.core&#10;    androidTestImplementation platform(libs.androidx.compose.bom)&#10;    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'&#10;    debugImplementation libs.androidx.compose.ui.tooling&#10;    debugImplementation libs.androidx.compose.ui.test.manifest&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.ClimatScopeApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@android:style/Theme.Material.DayNight.NoActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@android:style/Theme.Material.DayNight.NoActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.ClimatScopeApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AppCompat.DayNight.NoActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.AppCompat.DayNight.NoActionBar&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/App.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/App.kt" />
              <option name="originalContent" value="package com.myapp.climatscope&#10;&#10;import android.app.Application&#10;import com.myapp.climatscope.openweathermap.OpenWeatherService&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class App : Application() {&#10;&#10;    companion object {&#10;        lateinit var instance : App&#10;&#10;        val dataBase : DataBase by lazy {&#10;            DataBase(instance)&#10;        }&#10;&#10;        private val httpClient = OkHttpClient.Builder()&#10;            .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))&#10;            .build()&#10;&#10;        private val retrofit = Retrofit.Builder()&#10;            .client(httpClient)&#10;            .baseUrl(&quot;https://api.openweathermap.org/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;&#10;        val weatherService :OpenWeatherService = retrofit.create(OpenWeatherService::class.java)&#10;&#10;    }&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        instance = this&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.myapp.climatscope&#10;&#10;import android.app.Application&#10;import com.myapp.climatscope.di.DependencyContainer&#10;&#10;class App : Application() {&#10;&#10;    lateinit var dependencyContainer: DependencyContainer&#10;        private set&#10;&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        dependencyContainer = DependencyContainer(this)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/city/CityActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/city/CityActivity.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.city&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.myapp.climatscope.R&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.weather.WeatherActivity&#10;import com.myapp.climatscope.weather.WeatherFragment&#10;&#10;class CityActivity : AppCompatActivity(), CityFragment.CityFragmentListener {&#10;&#10;    private lateinit var cityFragment: CityFragment&#10;    private var weatherFragment: WeatherFragment? = null&#10;    private var currentCity: City? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_city)&#10;        cityFragment = supportFragmentManager.findFragmentById(R.id.fragment_city) as CityFragment&#10;        cityFragment.listener = this&#10;        weatherFragment =&#10;            supportFragmentManager.findFragmentById(R.id.weather_fragment) as WeatherFragment?&#10;    }&#10;&#10;    override fun onCitySelected(city: City) {&#10;        currentCity = city&#10;        if (isHandSetLayout()) {&#10;            startWeatherActivity(city)&#10;        } else {&#10;            weatherFragment?.updateWeatherForCity(city.name)&#10;        }&#10;    }&#10;&#10;    override fun onEmptyCities() {&#10;        weatherFragment?.clearUi()&#10;    }&#10;&#10;    private fun isHandSetLayout(): Boolean = weatherFragment == null&#10;&#10;    private fun startWeatherActivity(city: City) {&#10;        val intent = Intent(this, WeatherActivity::class.java)&#10;        intent.putExtra(WeatherFragment.EXTRA_CITY_NAME, city.name)&#10;        startActivity(intent)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.myapp.climatscope.city&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.widget.Toolbar&#10;import com.myapp.climatscope.R&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.weather.WeatherActivity&#10;import com.myapp.climatscope.weather.WeatherFragment&#10;&#10;class CityActivity : AppCompatActivity(), CityFragment.CityFragmentListener {&#10;&#10;    private lateinit var cityFragment: CityFragment&#10;    private var weatherFragment: WeatherFragment? = null&#10;    private var currentCity: City? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_city)&#10;&#10;        // Configuration de la Toolbar&#10;        val toolbar = findViewById&lt;Toolbar&gt;(R.id.toolbar)&#10;        setSupportActionBar(toolbar)&#10;&#10;        cityFragment = supportFragmentManager.findFragmentById(R.id.fragment_city) as CityFragment&#10;        cityFragment.listener = this&#10;        weatherFragment =&#10;            supportFragmentManager.findFragmentById(R.id.weather_fragment) as WeatherFragment?&#10;    }&#10;&#10;    override fun onCitySelected(city: City) {&#10;        currentCity = city&#10;        if (isHandSetLayout()) {&#10;            startWeatherActivity(city)&#10;        } else {&#10;            weatherFragment?.updateWeatherForCity(city.name)&#10;        }&#10;    }&#10;&#10;    override fun onEmptyCities() {&#10;        weatherFragment?.clearUi()&#10;    }&#10;&#10;    private fun isHandSetLayout(): Boolean = weatherFragment == null&#10;&#10;    private fun startWeatherActivity(city: City) {&#10;        val intent = Intent(this, WeatherActivity::class.java)&#10;        intent.putExtra(WeatherFragment.EXTRA_CITY_NAME, city.name)&#10;        startActivity(intent)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/city/CityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/city/CityAdapter.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.city&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.cardview.widget.CardView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.myapp.climatscope.R&#10;&#10;class CityAdapter(&#10;    private val cities: List&lt;City&gt;,&#10;    private val cityListener: CityAdapter.CityItemListener)&#10;    :RecyclerView.Adapter&lt;CityAdapter.ViewHolder&gt;(), View.OnClickListener {&#10;    interface CityItemListener {&#10;        fun onCitySelected(city: City)&#10;        fun onCityDeleted(city: City)&#10;&#10;&#10;    }&#10;&#10;    class ViewHolder (itemView : View) : RecyclerView.ViewHolder(itemView) {&#10;        val cardView = itemView.findViewById&lt;CardView&gt;(R.id.card_view)!!&#10;        val cityNameView = itemView.findViewById&lt;TextView&gt;(R.id.name)!!&#10;        val cityDeleteView = itemView.findViewById&lt;View&gt;(R.id.delete)!!&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val viewItem = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_city, parent , false)&#10;        return ViewHolder(viewItem)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val city = cities[position]&#10;        with(holder){&#10;            cardView.tag = city&#10;            cardView.setOnClickListener(this@CityAdapter)&#10;            cityNameView.text = city.name&#10;            cityDeleteView.tag = city&#10;            cityDeleteView.setOnClickListener(this@CityAdapter)&#10;        }&#10;    }&#10;    override fun getItemCount(): Int = cities.size&#10;&#10;    override fun onClick(view: View) {&#10;        when(view.id){&#10;            R.id.card_view -&gt; cityListener.onCitySelected(view.tag as City)&#10;            R.id.delete -&gt; cityListener.onCityDeleted(view.tag as City)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.myapp.climatscope.city&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.cardview.widget.CardView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.myapp.climatscope.R&#10;import com.myapp.climatscope.domain.entities.City&#10;&#10;class CityAdapter(&#10;    private var cities: MutableList&lt;City&gt;,&#10;    private val cityListener: CityItemListener&#10;) : RecyclerView.Adapter&lt;CityAdapter.ViewHolder&gt;(), View.OnClickListener {&#10;&#10;    interface CityItemListener {&#10;        fun onCitySelected(city: City)&#10;        fun onCityDeleted(city: City)&#10;    }&#10;&#10;    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val cardView = itemView.findViewById&lt;CardView&gt;(R.id.card_view)!!&#10;        val cityNameView = itemView.findViewById&lt;TextView&gt;(R.id.name)!!&#10;        val cityDeleteView = itemView.findViewById&lt;View&gt;(R.id.delete)!!&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val viewItem = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_city, parent, false)&#10;        return ViewHolder(viewItem)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val city = cities[position]&#10;        with(holder) {&#10;            cardView.tag = city&#10;            cardView.setOnClickListener(this@CityAdapter)&#10;            cityNameView.text = city.name&#10;            cityDeleteView.tag = city&#10;            cityDeleteView.setOnClickListener(this@CityAdapter)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = cities.size&#10;&#10;    override fun onClick(view: View) {&#10;        when (view.id) {&#10;            R.id.card_view -&gt; cityListener.onCitySelected(view.tag as City)&#10;            R.id.delete -&gt; cityListener.onCityDeleted(view.tag as City)&#10;        }&#10;    }&#10;&#10;    fun updateCities(newCities: MutableList&lt;City&gt;) {&#10;        cities.clear()&#10;        cities.addAll(newCities)&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/city/CityFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/city/CityFragment.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.city&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.Menu&#10;import android.view.MenuInflater&#10;import android.view.MenuItem&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.myapp.climatscope.App&#10;import com.myapp.climatscope.R&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;class CityFragment : Fragment(), CityAdapter.CityItemListener {&#10;&#10;    interface CityFragmentListener {&#10;        fun onCitySelected(city: City)&#10;        fun onEmptyCities()&#10;    }&#10;&#10;    lateinit var listener: CityFragmentListener&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var adapter: CityAdapter&#10;&#10;    private val viewModel: CityViewModel by viewModels {&#10;        (requireActivity().application as App).dependencyContainer.cityViewModelFactory&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setHasOptionsMenu(true)&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_city, container, false)&#10;        recyclerView = view.findViewById(R.id.cities_recycler_view)&#10;        recyclerView.layoutManager = LinearLayoutManager(context)&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        adapter = CityAdapter(mutableListOf(), this)&#10;        recyclerView.adapter = adapter&#10;&#10;        observeViewModel()&#10;    }&#10;&#10;    private fun observeViewModel() {&#10;        viewLifecycleOwner.lifecycleScope.launch {&#10;            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                viewModel.uiState.collect { uiState -&gt;&#10;                    // Update adapter with new cities&#10;                    adapter.updateCities(uiState.cities.toMutableList())&#10;&#10;                    // Handle loading state if needed&#10;                    // You can add a progress bar here&#10;&#10;                    // Handle errors&#10;                    uiState.errorMessage?.let { message -&gt;&#10;                        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()&#10;                        viewModel.clearError()&#10;                    }&#10;&#10;                    // Notify listener about city state&#10;                    if (uiState.cities.isEmpty() &amp;&amp; !uiState.isLoading) {&#10;                        listener.onEmptyCities()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {&#10;        inflater.inflate(R.menu.fragment_city, menu)&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        when (item.itemId) {&#10;            R.id.action_create_city -&gt; {&#10;                showCreateCityDialog()&#10;                return true&#10;            }&#10;        }&#10;        return super.onOptionsItemSelected(item)&#10;    }&#10;&#10;    override fun onCitySelected(city: City) {&#10;        listener.onCitySelected(city)&#10;    }&#10;&#10;    fun selectFirstCity() {&#10;        val currentCities = viewModel.uiState.value.cities&#10;        when (currentCities.isEmpty()) {&#10;            true -&gt; listener.onEmptyCities()&#10;            false -&gt; listener.onCitySelected(currentCities.first())&#10;        }&#10;    }&#10;&#10;    override fun onCityDeleted(city: City) {&#10;        showDeleteCityDialog(city)&#10;    }&#10;&#10;    private fun showCreateCityDialog() {&#10;        val createCityFragment = CreateCityDialogFragment()&#10;        createCityFragment.listener = object : CreateCityDialogFragment.CreateCityDialogListener {&#10;            override fun onDialogPositiveClick(cityName: String) {&#10;                viewModel.createCity(cityName)&#10;            }&#10;&#10;            override fun onDialogNegativeClick() {&#10;                // Do nothing&#10;            }&#10;        }&#10;        createCityFragment.show(parentFragmentManager, &quot;CreateCityDialogFragment&quot;)&#10;    }&#10;&#10;    private fun showDeleteCityDialog(city: City) {&#10;        val deleteCityFragment = DeleteCityDialogFragment.newInstance(city)&#10;        deleteCityFragment.listener = object : DeleteCityDialogFragment.DeleteCityDialogListener {&#10;            override fun onDialogPositiveClick() {&#10;                viewModel.deleteCity(city)&#10;            }&#10;&#10;            override fun onDialogNegativeClick() {&#10;                // Do nothing&#10;            }&#10;        }&#10;        deleteCityFragment.show(parentFragmentManager, &quot;DeleteCityDialogFragment&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.myapp.climatscope.city&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.Menu&#10;import android.view.MenuInflater&#10;import android.view.MenuItem&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.myapp.climatscope.App&#10;import com.myapp.climatscope.R&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;class CityFragment : Fragment(), CityAdapter.CityItemListener {&#10;&#10;    interface CityFragmentListener {&#10;        fun onCitySelected(city: City)&#10;        fun onEmptyCities()&#10;    }&#10;&#10;    lateinit var listener: CityFragmentListener&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var adapter: CityAdapter&#10;    &#10;    private val viewModel: CityViewModel by viewModels {&#10;        (requireActivity().application as App).dependencyContainer.cityViewModelFactory&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        @Suppress(&quot;DEPRECATION&quot;)&#10;        setHasOptionsMenu(true)&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_city, container, false)&#10;        recyclerView = view.findViewById(R.id.cities_recycler_view)&#10;        recyclerView.layoutManager = LinearLayoutManager(context)&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        &#10;        adapter = CityAdapter(mutableListOf(), this)&#10;        recyclerView.adapter = adapter&#10;        &#10;        observeViewModel()&#10;    }&#10;    &#10;    private fun observeViewModel() {&#10;        viewLifecycleOwner.lifecycleScope.launch {&#10;            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                viewModel.uiState.collect { uiState -&gt;&#10;                    // Update adapter with new cities&#10;                    adapter.updateCities(uiState.cities.toMutableList())&#10;                    &#10;                    // Handle errors&#10;                    uiState.errorMessage?.let { message -&gt;&#10;                        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()&#10;                        viewModel.clearError()&#10;                    }&#10;                    &#10;                    // Notify listener about city state&#10;                    if (uiState.cities.isEmpty() &amp;&amp; !uiState.isLoading) {&#10;                        listener.onEmptyCities()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Deprecated(&quot;Deprecated in Java&quot;)&#10;    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {&#10;        inflater.inflate(R.menu.fragment_city, menu)&#10;    }&#10;&#10;    @Deprecated(&quot;Deprecated in Java&quot;)&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        when (item.itemId) {&#10;            R.id.action_create_city -&gt; {&#10;                showCreateCityDialog()&#10;                return true&#10;            }&#10;        }&#10;        return super.onOptionsItemSelected(item)&#10;    }&#10;&#10;    override fun onCitySelected(city: City) {&#10;        listener.onCitySelected(city)&#10;    }&#10;&#10;    fun selectFirstCity() {&#10;        val currentCities = viewModel.uiState.value.cities&#10;        when (currentCities.isEmpty()) {&#10;            true -&gt; listener.onEmptyCities()&#10;            false -&gt; listener.onCitySelected(currentCities.first())&#10;        }&#10;    }&#10;&#10;    override fun onCityDeleted(city: City) {&#10;        showDeleteCityDialog(city)&#10;    }&#10;&#10;    private fun showCreateCityDialog() {&#10;        val createCityFragment = CreateCityDialogFragment()&#10;        createCityFragment.listener = object : CreateCityDialogFragment.CreateCityDialogListener {&#10;            override fun onDialogPositiveClick(cityName: String) {&#10;                viewModel.createCity(cityName)&#10;            }&#10;&#10;            override fun onDialogNegativeClick() {&#10;                // Do nothing&#10;            }&#10;        }&#10;        createCityFragment.show(parentFragmentManager, &quot;CreateCityDialogFragment&quot;)&#10;    }&#10;&#10;    private fun showDeleteCityDialog(city: City) {&#10;        val deleteCityFragment = DeleteCityDialogFragment.newInstance(city.name)&#10;        deleteCityFragment.listener = object : DeleteCityDialogFragment.DeleteCityDialogListener {&#10;            override fun onDeletePositiveClick() {&#10;                viewModel.deleteCity(city)&#10;            }&#10;&#10;            override fun onDeleteNegativeClick() {&#10;                // Do nothing&#10;            }&#10;        }&#10;        deleteCityFragment.show(parentFragmentManager, &quot;DeleteCityDialogFragment&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/data/local/CityLocalDataSource.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/data/local/CityLocalDataSource.kt" />
              <option name="updatedContent" value="package com.myapp.climatscope.data.local&#10;&#10;import android.content.ContentValues&#10;import android.content.Context&#10;import android.database.sqlite.SQLiteDatabase&#10;import android.database.sqlite.SQLiteOpenHelper&#10;import android.util.Log&#10;import com.myapp.climatscope.domain.entities.City&#10;&#10;private const val DATABASE_NAME = &quot;climatscope.db&quot;&#10;private const val DATABASE_VERSION = 1&#10;&#10;private const val CITY_TABLE_NAME = &quot;city&quot;&#10;private const val CITY_KEY_ID = &quot;id&quot;&#10;private const val CITY_KEY_NAME = &quot;name&quot;&#10;&#10;private const val CITY_TABLE_CREATE = &quot;&quot;&quot;&#10;    CREATE TABLE $CITY_TABLE_NAME (&#10;        $CITY_KEY_ID INTEGER PRIMARY KEY,&#10;        $CITY_KEY_NAME TEXT&#10;)    &#10;&quot;&quot;&quot;&#10;private const val CITY_QUERY_SELECT_ALL = &quot;SELECT * FROM $CITY_TABLE_NAME&quot;&#10;&#10;class CityLocalDataSource(context: Context) :&#10;    SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {&#10;    &#10;    private val TAG = CityLocalDataSource::class.java.simpleName&#10;&#10;    override fun onCreate(db: SQLiteDatabase?) {&#10;        db?.execSQL(CITY_TABLE_CREATE)&#10;    }&#10;&#10;    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {&#10;        // Handle database upgrade if needed&#10;    }&#10;&#10;    suspend fun createCity(city: City): Boolean {&#10;        return try {&#10;            val values = ContentValues().apply {&#10;                put(CITY_KEY_NAME, city.name)&#10;            }&#10;            &#10;            Log.d(TAG, &quot;creating City: $values&quot;)&#10;            val id = writableDatabase.insert(CITY_TABLE_NAME, null, values)&#10;            id &gt; 0&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error creating city&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    suspend fun getAllCities(): List&lt;City&gt; {&#10;        val cities = mutableListOf&lt;City&gt;()&#10;        try {&#10;            readableDatabase.rawQuery(CITY_QUERY_SELECT_ALL, null).use { cursor -&gt;&#10;                while (cursor.moveToNext()) {&#10;                    val city = City(&#10;                        id = cursor.getLong(cursor.getColumnIndexOrThrow(CITY_KEY_ID)),&#10;                        name = cursor.getString(cursor.getColumnIndexOrThrow(CITY_KEY_NAME))&#10;                    )&#10;                    cities.add(city)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error getting cities&quot;, e)&#10;        }&#10;        return cities&#10;    }&#10;&#10;    suspend fun deleteCity(city: City): Boolean {&#10;        return try {&#10;            Log.d(TAG, &quot;delete city: $city&quot;)&#10;            val deleteCount = writableDatabase.delete(&#10;                CITY_TABLE_NAME,&#10;                &quot;$CITY_KEY_ID = ?&quot;,&#10;                arrayOf(city.id.toString())&#10;            )&#10;            deleteCount == 1&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error deleting city&quot;, e)&#10;            false&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/data/remote/WeatherRemoteDataSource.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/data/remote/WeatherRemoteDataSource.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.data.remote&#10;&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;&#10;class WeatherRemoteDataSource(&#10;    private val apiService: WeatherApiService&#10;) {&#10;    suspend fun getWeatherForCity(cityName: String): Result&lt;Weather&gt; {&#10;        return withContext(Dispatchers.IO) {&#10;            try {&#10;                val response = apiService.getWeather(&quot;$cityName,fr&quot;)&#10;                if (response.isSuccessful) {&#10;                    response.body()?.let { weatherResponse -&gt;&#10;                        val weather = mapToWeather(weatherResponse)&#10;                        Result.success(weather)&#10;                    } ?: Result.failure(Exception(&quot;Empty response body&quot;))&#10;                } else {&#10;                    Result.failure(Exception(&quot;API Error: ${response.code()}&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapToWeather(response: WeatherResponse): Weather {&#10;        val weatherFirst = response.weather.first()&#10;        return Weather(&#10;            description = weatherFirst.description,&#10;            temperature = response.main.temperature,&#10;            humidity = response.main.humidity,&#10;            pressure = response.main.pressure,&#10;            iconUrl = &quot;https://openweathermap.org/img/wn/${weatherFirst.icon}.png&quot;&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.data.remote&#10;&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;&#10;class WeatherRemoteDataSource(&#10;    private val apiService: WeatherApiService&#10;) {&#10;    suspend fun getWeatherForCity(cityName: String): Result&lt;Weather&gt; {&#10;        return withContext(Dispatchers.IO) {&#10;            try {&#10;                val response = apiService.getWeather(&quot;$cityName,fr&quot;)&#10;                if (response.isSuccessful) {&#10;                    response.body()?.let { weatherResponse -&gt;&#10;                        val weather = mapToWeather(weatherResponse)&#10;                        Result.success(weather)&#10;                    } ?: Result.failure(Exception(&quot;Empty response body&quot;))&#10;                } else {&#10;                    Result.failure(Exception(&quot;API Error: ${response.code()}&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    suspend fun getWeatherByCoordinates(latitude: Double, longitude: Double): Result&lt;Weather&gt; {&#10;        return withContext(Dispatchers.IO) {&#10;            try {&#10;                val response = apiService.getWeatherByCoordinates(latitude, longitude)&#10;                if (response.isSuccessful) {&#10;                    response.body()?.let { weatherResponse -&gt;&#10;                        val weather = mapToWeather(weatherResponse)&#10;                        Result.success(weather)&#10;                    } ?: Result.failure(Exception(&quot;Empty response body&quot;))&#10;                } else {&#10;                    Result.failure(Exception(&quot;API Error: ${response.code()}&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapToWeather(response: WeatherResponse): Weather {&#10;        val weatherFirst = response.weather.first()&#10;        return Weather(&#10;            description = weatherFirst.description,&#10;            temperature = response.main.temperature,&#10;            feelsLike = response.main.feelsLike,&#10;            humidity = response.main.humidity,&#10;            pressure = response.main.pressure,&#10;            windSpeed = response.wind?.speed ?: 0.0,&#10;            iconUrl = &quot;https://openweathermap.org/img/wn/${weatherFirst.icon}.png&quot;&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/data/remote/WeatherResponse.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/data/remote/WeatherResponse.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.data.remote&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class WeatherResponse(&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;WeatherInfo&gt;,&#10;    @SerializedName(&quot;main&quot;) val main: MainInfo,&#10;    @SerializedName(&quot;wind&quot;) val wind: WindInfo? = null&#10;)&#10;&#10;data class WeatherInfo(&#10;    @SerializedName(&quot;description&quot;) val description: String,&#10;    @SerializedName(&quot;icon&quot;) val icon: String&#10;)&#10;&#10;data class MainInfo(&#10;    @SerializedName(&quot;temp&quot;) val temperature: Double,&#10;    @SerializedName(&quot;feels_like&quot;) val feelsLike: Double,&#10;    @SerializedName(&quot;humidity&quot;) val humidity: Int,&#10;    @SerializedName(&quot;pressure&quot;) val pressure: Int&#10;)&#10;&#10;data class WindInfo(&#10;    @SerializedName(&quot;speed&quot;) val speed: Double&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/di/DependencyContainer.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/di/DependencyContainer.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.di&#10;&#10;import android.content.Context&#10;import com.myapp.climatscope.data.local.CityLocalDataSource&#10;import com.myapp.climatscope.data.remote.WeatherApiService&#10;import com.myapp.climatscope.data.remote.WeatherRemoteDataSource&#10;import com.myapp.climatscope.data.repositories.CityRepositoryImpl&#10;import com.myapp.climatscope.data.repositories.WeatherRepositoryImpl&#10;import com.myapp.climatscope.domain.repositories.CityRepository&#10;import com.myapp.climatscope.domain.repositories.WeatherRepository&#10;import com.myapp.climatscope.domain.usecases.CreateCityUseCase&#10;import com.myapp.climatscope.domain.usecases.DeleteCityUseCase&#10;import com.myapp.climatscope.domain.usecases.GetAllCitiesUseCase&#10;import com.myapp.climatscope.domain.usecases.GetWeatherUseCase&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModelFactory&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModelFactory&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class DependencyContainer(private val context: Context) {&#10;&#10;    // Network&#10;    private val httpClient = OkHttpClient.Builder()&#10;        .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))&#10;        .build()&#10;&#10;    private val retrofit = Retrofit.Builder()&#10;        .client(httpClient)&#10;        .baseUrl(&quot;https://api.openweathermap.org/&quot;)&#10;        .addConverterFactory(GsonConverterFactory.create())&#10;        .build()&#10;&#10;    // Data Sources&#10;    private val weatherApiService: WeatherApiService = retrofit.create(WeatherApiService::class.java)&#10;    private val weatherRemoteDataSource = WeatherRemoteDataSource(weatherApiService)&#10;    private val cityLocalDataSource = CityLocalDataSource(context)&#10;&#10;    // Repositories&#10;    private val cityRepository: CityRepository = CityRepositoryImpl(cityLocalDataSource)&#10;    private val weatherRepository: WeatherRepository = WeatherRepositoryImpl(weatherRemoteDataSource)&#10;&#10;    // Use Cases&#10;    private val getAllCitiesUseCase = GetAllCitiesUseCase(cityRepository)&#10;    private val createCityUseCase = CreateCityUseCase(cityRepository)&#10;    private val deleteCityUseCase = DeleteCityUseCase(cityRepository)&#10;    private val getWeatherUseCase = GetWeatherUseCase(weatherRepository)&#10;&#10;    // ViewModels Factories&#10;    val cityViewModelFactory = CityViewModelFactory(&#10;        getAllCitiesUseCase,&#10;        createCityUseCase,&#10;        deleteCityUseCase&#10;    )&#10;&#10;    val weatherViewModelFactory = WeatherViewModelFactory(getWeatherUseCase)&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.di&#10;&#10;import android.content.Context&#10;import com.myapp.climatscope.data.local.CityLocalDataSource&#10;import com.myapp.climatscope.data.location.DefaultLocationService&#10;import com.myapp.climatscope.data.location.LocationService&#10;import com.myapp.climatscope.data.remote.WeatherApiService&#10;import com.myapp.climatscope.data.remote.WeatherRemoteDataSource&#10;import com.myapp.climatscope.data.repositories.CityRepositoryImpl&#10;import com.myapp.climatscope.data.repositories.WeatherRepositoryImpl&#10;import com.myapp.climatscope.domain.repositories.CityRepository&#10;import com.myapp.climatscope.domain.repositories.WeatherRepository&#10;import com.myapp.climatscope.domain.usecases.*&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModelFactory&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModelFactory&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class DependencyContainer(private val context: Context) {&#10;&#10;    // Network&#10;    private val httpClient = OkHttpClient.Builder()&#10;        .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))&#10;        .build()&#10;&#10;    private val retrofit = Retrofit.Builder()&#10;        .client(httpClient)&#10;        .baseUrl(&quot;https://api.openweathermap.org/&quot;)&#10;        .addConverterFactory(GsonConverterFactory.create())&#10;        .build()&#10;&#10;    // Services&#10;    private val weatherApiService: WeatherApiService = retrofit.create(WeatherApiService::class.java)&#10;    private val weatherRemoteDataSource = WeatherRemoteDataSource(weatherApiService)&#10;    private val cityLocalDataSource = CityLocalDataSource(context)&#10;    val locationService: LocationService = DefaultLocationService(context)&#10;&#10;    // Repositories&#10;    private val cityRepository: CityRepository = CityRepositoryImpl(cityLocalDataSource)&#10;    private val weatherRepository: WeatherRepository = WeatherRepositoryImpl(weatherRemoteDataSource)&#10;&#10;    // Use Cases&#10;    private val getAllCitiesUseCase = GetAllCitiesUseCase(cityRepository)&#10;    private val createCityUseCase = CreateCityUseCase(cityRepository)&#10;    private val deleteCityUseCase = DeleteCityUseCase(cityRepository)&#10;    private val getWeatherUseCase = GetWeatherUseCase(weatherRepository)&#10;    private val getWeatherByLocationUseCase = DefaultGetWeatherByLocationUseCase(locationService, weatherRepository)&#10;&#10;    // ViewModels Factories&#10;    val cityViewModelFactory = CityViewModelFactory(getAllCitiesUseCase, createCityUseCase, deleteCityUseCase)&#10;    val weatherViewModelFactory = WeatherViewModelFactory(getWeatherUseCase)&#10;&#10;    // Public access to use cases&#10;    fun getWeatherByLocationUseCase(): GetWeatherByLocationUseCase = getWeatherByLocationUseCase&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/entities/City.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/entities/City.kt" />
              <option name="updatedContent" value="package com.myapp.climatscope.domain.entities&#10;&#10;data class City(&#10;    val id: Long = -1,&#10;    val name: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/repositories/CityRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/repositories/CityRepository.kt" />
              <option name="updatedContent" value="package com.myapp.climatscope.domain.repositories&#10;&#10;import com.myapp.climatscope.domain.entities.City&#10;&#10;interface CityRepository {&#10;    suspend fun getAllCities(): List&lt;City&gt;&#10;    suspend fun createCity(city: City): Boolean&#10;    suspend fun deleteCity(city: City): Boolean&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/repositories/WeatherRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/repositories/WeatherRepository.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.domain.repositories&#10;&#10;import com.myapp.climatscope.domain.entities.Weather&#10;&#10;interface WeatherRepository {&#10;    suspend fun getWeatherForCity(cityName: String): Result&lt;Weather&gt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.domain.repositories&#10;&#10;import com.myapp.climatscope.domain.entities.Weather&#10;&#10;interface WeatherRepository {&#10;    suspend fun getWeatherForCity(cityName: String): Result&lt;Weather&gt;&#10;    suspend fun getWeatherByCoordinates(latitude: Double, longitude: Double): Result&lt;Weather&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/usecases/CreateCityUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/usecases/CreateCityUseCase.kt" />
              <option name="updatedContent" value="package com.myapp.climatscope.domain.usecases&#10;&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.repositories.CityRepository&#10;&#10;class CreateCityUseCase(&#10;    private val cityRepository: CityRepository&#10;) {&#10;    suspend operator fun invoke(cityName: String): Boolean {&#10;        val city = City(name = cityName)&#10;        return cityRepository.createCity(city)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/usecases/DeleteCityUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/usecases/DeleteCityUseCase.kt" />
              <option name="updatedContent" value="package com.myapp.climatscope.domain.usecases&#10;&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.repositories.CityRepository&#10;&#10;class DeleteCityUseCase(&#10;    private val cityRepository: CityRepository&#10;) {&#10;    suspend operator fun invoke(city: City): Boolean {&#10;        return cityRepository.deleteCity(city)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/usecases/GetAllCitiesUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/domain/usecases/GetAllCitiesUseCase.kt" />
              <option name="updatedContent" value="package com.myapp.climatscope.domain.usecases&#10;&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.repositories.CityRepository&#10;&#10;class GetAllCitiesUseCase(&#10;    private val cityRepository: CityRepository&#10;) {&#10;    suspend operator fun invoke(): List&lt;City&gt; {&#10;        return cityRepository.getAllCities()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/MainActivity.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.rememberNavController&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.presentation.navigation.ClimatScopeNavigation&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        val app = application as ClimatScopeApplication&#10;&#10;        setContent {&#10;            ClimatScopeTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    ClimatScopeNavigation(&#10;                        navController = rememberNavController(),&#10;                        app = app&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/navigation/Navigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/navigation/Navigation.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.presentation.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.presentation.screens.*&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;&#10;sealed class Screen(val route: String) {&#10;    object LocationPermission : Screen(&quot;location_permission&quot;)&#10;    object Home : Screen(&quot;home&quot;)&#10;    object CitySelection : Screen(&quot;city_selection&quot;)&#10;    object Weather : Screen(&quot;weather/{cityName}&quot;) {&#10;        fun createRoute(cityName: String) = &quot;weather/$cityName&quot;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ClimatScopeNavigation(&#10;    navController: NavHostController = rememberNavController(),&#10;    app: ClimatScopeApplication&#10;) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Screen.Home.route // Démarrage direct sur l'écran principal&#10;    ) {&#10;        // Écran de demande de localisation (optionnel)&#10;        composable(Screen.LocationPermission.route) {&#10;            LocationPermissionScreen(&#10;                onLocationGranted = {&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.LocationPermission.route) { inclusive = true }&#10;                    }&#10;                },&#10;                onLocationDenied = {&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.LocationPermission.route) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Écran principal simplifié&#10;        composable(Screen.Home.route) {&#10;            val weatherViewModel: WeatherViewModel = viewModel(&#10;                factory = app.dependencyContainer.weatherViewModelFactory&#10;            )&#10;            val cityViewModel: CityViewModel = viewModel(&#10;                factory = app.dependencyContainer.cityViewModelFactory&#10;            )&#10;&#10;            HomeScreen(&#10;                weatherViewModel = weatherViewModel,&#10;                cityViewModel = cityViewModel&#10;            )&#10;        }&#10;&#10;        // Écran de sélection des villes (optionnel)&#10;        composable(Screen.CitySelection.route) {&#10;            val cityViewModel: CityViewModel = viewModel(&#10;                factory = app.dependencyContainer.cityViewModelFactory&#10;            )&#10;            val weatherViewModel: WeatherViewModel = viewModel(&#10;                factory = app.dependencyContainer.weatherViewModelFactory&#10;            )&#10;&#10;            CitySelectionScreen(&#10;                cityViewModel = cityViewModel,&#10;                onCitySelected = { city -&gt;&#10;                    weatherViewModel.loadWeatherForCity(city.name)&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.CitySelection.route) { inclusive = true }&#10;                    }&#10;                },&#10;                onBackPressed = {&#10;                    navController.popBackStack()&#10;                }&#10;            )&#10;        }&#10;&#10;        // Écran détaillé d'une ville (optionnel)&#10;        composable(Screen.Weather.route) { backStackEntry -&gt;&#10;            val cityName = backStackEntry.arguments?.getString(&quot;cityName&quot;) ?: &quot;&quot;&#10;            val weatherViewModel: WeatherViewModel = viewModel(&#10;                factory = app.dependencyContainer.weatherViewModelFactory&#10;            )&#10;&#10;            WeatherScreen(&#10;                cityName = cityName,&#10;                weatherViewModel = weatherViewModel,&#10;                onBackPressed = {&#10;                    navController.popBackStack()&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.presentation.screens.*&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;&#10;sealed class Screen(val route: String) {&#10;    object LocationPermission : Screen(&quot;location_permission&quot;)&#10;    object Home : Screen(&quot;home&quot;)&#10;    object CitySelection : Screen(&quot;city_selection&quot;)&#10;    object Weather : Screen(&quot;weather/{cityName}&quot;) {&#10;        fun createRoute(cityName: String) = &quot;weather/$cityName&quot;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ClimatScopeNavigation(&#10;    navController: NavHostController = rememberNavController(),&#10;    app: ClimatScopeApplication&#10;) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Screen.Home.route // Démarrage direct sur l'écran principal&#10;    ) {&#10;        // Écran de demande de localisation (optionnel)&#10;        composable(Screen.LocationPermission.route) {&#10;            LocationPermissionScreen(&#10;                onLocationGranted = {&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.LocationPermission.route) { inclusive = true }&#10;                    }&#10;                },&#10;                onLocationDenied = {&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.LocationPermission.route) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Écran principal simplifié&#10;        composable(Screen.Home.route) {&#10;            val weatherViewModel: WeatherViewModel = viewModel(&#10;                factory = app.dependencyContainer.weatherViewModelFactory&#10;            )&#10;            val cityViewModel: CityViewModel = viewModel(&#10;                factory = app.dependencyContainer.cityViewModelFactory&#10;            )&#10;&#10;            HomeScreen(&#10;                weatherViewModel = weatherViewModel,&#10;                cityViewModel = cityViewModel&#10;            )&#10;        }&#10;&#10;        // Écran de sélection des villes (optionnel)&#10;        composable(Screen.CitySelection.route) {&#10;            val cityViewModel: CityViewModel = viewModel(&#10;                factory = app.dependencyContainer.cityViewModelFactory&#10;            )&#10;            val weatherViewModel: WeatherViewModel = viewModel(&#10;                factory = app.dependencyContainer.weatherViewModelFactory&#10;            )&#10;&#10;            CitySelectionScreen(&#10;                cityViewModel = cityViewModel,&#10;                onCitySelected = { city -&gt;&#10;                    weatherViewModel.loadWeatherForCity(city.name)&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.CitySelection.route) { inclusive = true }&#10;                    }&#10;                },&#10;                onBackPressed = {&#10;                    navController.popBackStack()&#10;                }&#10;            )&#10;        }&#10;&#10;        // Écran détaillé d'une ville (optionnel)&#10;        composable(Screen.Weather.route) { backStackEntry -&gt;&#10;            val cityName = backStackEntry.arguments?.getString(&quot;cityName&quot;) ?: &quot;&quot;&#10;            val weatherViewModel: WeatherViewModel = viewModel(&#10;                factory = app.dependencyContainer.weatherViewModelFactory&#10;            )&#10;&#10;            WeatherScreen(&#10;                cityName = cityName,&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;                viewModel = weatherViewModel&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/CitySelectionScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/CitySelectionScreen.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CitySelectionScreen(&#10;    cityViewModel: CityViewModel = viewModel(),&#10;    onCitySelected: (City) -&gt; Unit,&#10;    onBackPressed: () -&gt; Unit = {}&#10;) {&#10;    val cityUiState by cityViewModel.uiState.collectAsState()&#10;    var showAddDialog by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;            .statusBarsPadding()&#10;    ) {&#10;        // Header&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    text = &quot;Choisir une ville&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackPressed) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ArrowBack,&#10;                        contentDescription = &quot;Retour&quot;&#10;                    )&#10;                }&#10;            },&#10;            actions = {&#10;                IconButton(onClick = { showAddDialog = true }) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Ajouter ville&quot;&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.background&#10;            )&#10;        )&#10;&#10;        when {&#10;            cityUiState.isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;            cityUiState.cities.isEmpty() -&gt; {&#10;                EmptyStateContent(&#10;                    onAddCityClick = { showAddDialog = true }&#10;                )&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(cityUiState.cities) { city -&gt;&#10;                        CityCard(&#10;                            city = city,&#10;                            onCityClick = { onCitySelected(city) },&#10;                            onDeleteCity = { cityViewModel.deleteCity(city) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAddDialog) {&#10;        AddCityDialog(&#10;            onAddCity = { cityName -&gt;&#10;                cityViewModel.createCity(cityName)&#10;                showAddDialog = false&#10;            },&#10;            onDismiss = { showAddDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CityCard(&#10;    city: City,&#10;    onCityClick: () -&gt; Unit,&#10;    onDeleteCity: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onCityClick,&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .clip(CircleShape)&#10;                        .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.1f)),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = city.name.first().uppercase(),&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                Column {&#10;                    Text(&#10;                        text = city.name,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    Text(&#10;                        text = &quot;Appuyez pour sélectionner&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            IconButton(&#10;                onClick = onDeleteCity,&#10;                colors = IconButtonDefaults.iconButtonColors(&#10;                    contentColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Delete,&#10;                    contentDescription = &quot;Supprimer ${city.name}&quot;,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyStateContent(&#10;    onAddCityClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.LocationOn,&#10;            contentDescription = null,&#10;            modifier = Modifier.size(64.dp),&#10;            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;Aucune ville ajoutée&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.onSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;Commencez par ajouter votre première ville pour suivre la météo&quot;,&#10;            fontSize = 16.sp,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Button(&#10;            onClick = onAddCityClick,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Icon(Icons.Default.Add, contentDescription = null)&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;Ajouter une ville&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AddCityDialog(&#10;    onAddCity: (String) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    var cityName by remember { mutableStateOf(&quot;&quot;) }&#10;    var isError by remember { mutableStateOf(false) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot;Ajouter une ville&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                Text(&#10;                    text = &quot;Entrez le nom de la ville que vous souhaitez ajouter&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                OutlinedTextField(&#10;                    value = cityName,&#10;                    onValueChange = {&#10;                        cityName = it&#10;                        isError = false&#10;                    },&#10;                    label = { Text(&quot;Nom de la ville&quot;) },&#10;                    placeholder = { Text(&quot;ex: Paris, Londres...&quot;) },&#10;                    singleLine = true,&#10;                    isError = isError,&#10;                    supportingText = if (isError) {&#10;                        { Text(&quot;Veuillez entrer un nom de ville valide&quot;) }&#10;                    } else null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    if (cityName.isBlank()) {&#10;                        isError = true&#10;                    } else {&#10;                        onAddCity(cityName.trim())&#10;                    }&#10;                },&#10;                enabled = cityName.isNotBlank()&#10;            ) {&#10;                Text(&quot;Ajouter&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Annuler&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun CitySelectionScreenPreview() {&#10;    ClimatScopeTheme {&#10;        CitySelectionScreen(&#10;            onCitySelected = {},&#10;            onBackPressed = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CitySelectionScreen(&#10;    cityViewModel: CityViewModel = viewModel(),&#10;    onCitySelected: (City) -&gt; Unit,&#10;    onBackPressed: () -&gt; Unit = {}&#10;) {&#10;    val cityUiState by cityViewModel.uiState.collectAsState()&#10;    var showAddDialog by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;    ) {&#10;        // Header&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    text = &quot;Choisir une ville&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackPressed) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ArrowBack,&#10;                        contentDescription = &quot;Retour&quot;&#10;                    )&#10;                }&#10;            },&#10;            actions = {&#10;                IconButton(onClick = { showAddDialog = true }) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Ajouter ville&quot;&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.background&#10;            )&#10;        )&#10;&#10;        when {&#10;            cityUiState.isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;            cityUiState.cities.isEmpty() -&gt; {&#10;                EmptyStateContent(&#10;                    onAddCityClick = { showAddDialog = true }&#10;                )&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(cityUiState.cities) { city -&gt;&#10;                        CityCard(&#10;                            city = city,&#10;                            onCityClick = { onCitySelected(city) },&#10;                            onDeleteCity = { cityViewModel.deleteCity(city) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAddDialog) {&#10;        AddCityDialog(&#10;            onAddCity = { cityName -&gt;&#10;                cityViewModel.createCity(cityName)&#10;                showAddDialog = false&#10;            },&#10;            onDismiss = { showAddDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CityCard(&#10;    city: City,&#10;    onCityClick: () -&gt; Unit,&#10;    onDeleteCity: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onCityClick,&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .clip(CircleShape)&#10;                        .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.1f)),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = city.name.first().uppercase(),&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                Column {&#10;                    Text(&#10;                        text = city.name,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    Text(&#10;                        text = &quot;Appuyez pour sélectionner&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            IconButton(&#10;                onClick = onDeleteCity,&#10;                colors = IconButtonDefaults.iconButtonColors(&#10;                    contentColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Delete,&#10;                    contentDescription = &quot;Supprimer ${city.name}&quot;,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyStateContent(&#10;    onAddCityClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.LocationOn,&#10;            contentDescription = null,&#10;            modifier = Modifier.size(64.dp),&#10;            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;Aucune ville ajoutée&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.onSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;Commencez par ajouter votre première ville pour suivre la météo&quot;,&#10;            fontSize = 16.sp,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Button(&#10;            onClick = onAddCityClick,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Icon(Icons.Default.Add, contentDescription = null)&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;Ajouter une ville&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AddCityDialog(&#10;    onAddCity: (String) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    var cityName by remember { mutableStateOf(&quot;&quot;) }&#10;    var isError by remember { mutableStateOf(false) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = &quot;Ajouter une ville&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                Text(&#10;                    text = &quot;Entrez le nom de la ville que vous souhaitez ajouter&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                OutlinedTextField(&#10;                    value = cityName,&#10;                    onValueChange = {&#10;                        cityName = it&#10;                        isError = false&#10;                    },&#10;                    label = { Text(&quot;Nom de la ville&quot;) },&#10;                    placeholder = { Text(&quot;ex: Paris, Londres...&quot;) },&#10;                    singleLine = true,&#10;                    isError = isError,&#10;                    supportingText = if (isError) {&#10;                        { Text(&quot;Veuillez entrer un nom de ville valide&quot;) }&#10;                    } else null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    if (cityName.isBlank()) {&#10;                        isError = true&#10;                    } else {&#10;                        onAddCity(cityName.trim())&#10;                    }&#10;                },&#10;                enabled = cityName.isNotBlank()&#10;            ) {&#10;                Text(&quot;Ajouter&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Annuler&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun CitySelectionScreenPreview() {&#10;    ClimatScopeTheme {&#10;        CitySelectionScreen(&#10;            onCitySelected = {},&#10;            onBackPressed = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/EnhancedHomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/EnhancedHomeScreen.kt" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import android.Manifest&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import com.myapp.climatscope.presentation.components.*&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun EnhancedHomeScreen(&#10;    onCityClick: (City) -&gt; Unit,&#10;    cityViewModel: CityViewModel = viewModel(),&#10;    weatherViewModel: WeatherViewModel = viewModel()&#10;) {&#10;    val cityUiState by cityViewModel.uiState.collectAsState()&#10;    val weatherUiState by weatherViewModel.uiState.collectAsState()&#10;    var showBottomSheet by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;    &#10;    // Gestionnaire des permissions de géolocalisation&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;        &#10;        if (fineLocationGranted || coarseLocationGranted) {&#10;            scope.launch {&#10;                // Logique de géolocalisation sera implémentée ici&#10;                weatherViewModel.loadWeatherForCity(&quot;Ma position&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-chargement de la première ville&#10;    LaunchedEffect(Unit) {&#10;        if (cityUiState.cities.isNotEmpty() &amp;&amp; weatherUiState.weather == null) {&#10;            weatherViewModel.loadWeatherForCity(cityUiState.cities.first().name)&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MaterialTheme.colorScheme.primary.copy(alpha = 0.05f),&#10;                        MaterialTheme.colorScheme.background,&#10;                        MaterialTheme.colorScheme.surface.copy(alpha = 0.5f)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .statusBarsPadding(),&#10;            contentPadding = PaddingValues(bottom = 100.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // En-tête moderne avec localisation&#10;            item {&#10;                ModernLocationHeader(&#10;                    cityName = weatherUiState.cityName.ifEmpty { &quot;Choisir une ville&quot; },&#10;                    onLocationClick = {&#10;                        locationPermissionLauncher.launch(&#10;                            arrayOf(&#10;                                Manifest.permission.ACCESS_FINE_LOCATION,&#10;                                Manifest.permission.ACCESS_COARSE_LOCATION&#10;                            )&#10;                        )&#10;                    },&#10;                    onMenuClick = { showBottomSheet = true },&#10;                    modifier = Modifier.padding(horizontal = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Section météo principale&#10;            item {&#10;                weatherUiState.weather?.let { weather -&gt;&#10;                    EnhancedWeatherSection(&#10;                        weather = weather,&#10;                        isLoading = weatherUiState.isLoading,&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    )&#10;                } ?: run {&#10;                    if (weatherUiState.isLoading) {&#10;                        LoadingWeatherCard(&#10;                            modifier = Modifier.padding(horizontal = 16.dp)&#10;                        )&#10;                    } else {&#10;                        WelcomeCard(&#10;                            onLocationClick = {&#10;                                locationPermissionLauncher.launch(&#10;                                    arrayOf(&#10;                                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                                    )&#10;                                )&#10;                            },&#10;                            onSelectCityClick = { showBottomSheet = true },&#10;                            modifier = Modifier.padding(horizontal = 16.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Section des villes favorites (aperçu horizontal)&#10;            if (cityUiState.cities.isNotEmpty()) {&#10;                item {&#10;                    FavoriteCitiesSection(&#10;                        cities = cityUiState.cities,&#10;                        onCityClick = { city -&gt;&#10;                            weatherViewModel.loadWeatherForCity(city.name)&#10;                            onCityClick(city)&#10;                        },&#10;                        onSeeAllClick = { showBottomSheet = true }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Conseils météo&#10;            weatherUiState.weather?.let { weather -&gt;&#10;                item {&#10;                    WeatherAdviceCard(&#10;                        weather = weather,&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Bottom Sheet pour la gestion des villes&#10;        if (showBottomSheet) {&#10;            EnhancedCityBottomSheet(&#10;                cities = cityUiState.cities,&#10;                isLoading = cityUiState.isLoading,&#10;                onCitySelected = { city -&gt;&#10;                    weatherViewModel.loadWeatherForCity(city.name)&#10;                    showBottomSheet = false&#10;                },&#10;                onAddCity = { cityName -&gt;&#10;                    cityViewModel.createCity(cityName)&#10;                },&#10;                onDeleteCity = { city -&gt;&#10;                    cityViewModel.deleteCity(city)&#10;                },&#10;                onDismiss = { showBottomSheet = false }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Gestion des erreurs avec SnackBar&#10;    weatherUiState.errorMessage?.let { message -&gt;&#10;        LaunchedEffect(message) {&#10;            // Afficher un SnackBar d'erreur&#10;            weatherViewModel.clearError()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EnhancedWeatherSection(&#10;    weather: Weather,&#10;    isLoading: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Carte météo principale&#10;        ModernWeatherCard(&#10;            temperature = &quot;${weather.temperature.toInt()}°&quot;,&#10;            description = weather.description.replaceFirstChar { it.uppercase() },&#10;            iconUrl = weather.iconUrl&#10;        )&#10;&#10;        // Métriques météo en grille&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            item {&#10;                WeatherMetricCard(&#10;                    icon = Icons.Default.Star,&#10;                    label = &quot;Humidité&quot;,&#10;                    value = &quot;${weather.humidity}%&quot;,&#10;                    modifier = Modifier.width(120.dp)&#10;                )&#10;            }&#10;            item {&#10;                WeatherMetricCard(&#10;                    icon = Icons.Default.Favorite,&#10;                    label = &quot;Ressenti&quot;,&#10;                    value = &quot;${weather.feelsLike.toInt()}°&quot;,&#10;                    modifier = Modifier.width(120.dp)&#10;                )&#10;            }&#10;            item {&#10;                WeatherMetricCard(&#10;                    icon = Icons.Default.Info,&#10;                    label = &quot;Pression&quot;,&#10;                    value = &quot;${weather.pressure} hPa&quot;,&#10;                    modifier = Modifier.width(120.dp)&#10;                )&#10;            }&#10;            item {&#10;                WeatherMetricCard(&#10;                    icon = Icons.Default.Send,&#10;                    label = &quot;Vent&quot;,&#10;                    value = &quot;${weather.windSpeed} km/h&quot;,&#10;                    modifier = Modifier.width(120.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WelcomeCard(&#10;    onLocationClick: () -&gt; Unit,&#10;    onSelectCityClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Place,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Bienvenue dans ClimatScope&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Découvrez la météo en temps réel avec une interface moderne et intuitive&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = onLocationClick,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                ) {&#10;                    Icon(Icons.Default.LocationOn, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Utiliser ma position&quot;)&#10;                }&#10;&#10;                OutlinedButton(&#10;                    onClick = onSelectCityClick,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Choisir une ville&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FavoriteCitiesSection(&#10;    cities: List&lt;City&gt;,&#10;    onCityClick: (City) -&gt; Unit,&#10;    onSeeAllClick: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Mes villes&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            TextButton(onClick = onSeeAllClick) {&#10;                Text(&quot;Voir tout&quot;)&#10;                Icon(&#10;                    Icons.Default.ArrowForward,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        LazyRow(&#10;            contentPadding = PaddingValues(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            items(cities.take(5)) { city -&gt;&#10;                CityQuickCard(&#10;                    city = city,&#10;                    onClick = { onCityClick(city) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CityQuickCard(&#10;    city: City,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.width(120.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = city.name.first().uppercase(),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = city.name,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun EnhancedHomeScreenPreview() {&#10;    ClimatScopeTheme {&#10;        EnhancedHomeScreen(&#10;            onCityClick = { }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/HomeScreen.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import android.Manifest&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import com.myapp.climatscope.presentation.components.*&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    weatherViewModel: WeatherViewModel,&#10;    cityViewModel: CityViewModel = viewModel()&#10;) {&#10;    val cityUiState by cityViewModel.uiState.collectAsState()&#10;    val weatherUiState by weatherViewModel.uiState.collectAsState()&#10;    var showBottomSheet by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;    val app = context.applicationContext as ClimatScopeApplication&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Gestionnaire de permissions de géolocalisation&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;&#10;        if (fineLocationGranted || coarseLocationGranted) {&#10;            scope.launch {&#10;                try {&#10;                    val result = app.dependencyContainer.getWeatherByLocationUseCase().invoke()&#10;                    result.fold(&#10;                        onSuccess = { (weather, _) -&gt;&#10;                            weatherViewModel.setLocationWeather(&#10;                                weather,&#10;                                &quot;Ma position&quot;&#10;                            )&#10;                        },&#10;                        onFailure = { error -&gt;&#10;                            println(&quot;Erreur de géolocalisation: ${error.message}&quot;)&#10;                            weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;                        }&#10;                    )&#10;                } catch (e: Exception) {&#10;                    println(&quot;Erreur lors de la récupération de la localisation: ${e.message}&quot;)&#10;                    weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Chargement initial des données&#10;    LaunchedEffect(Unit) {&#10;        cityViewModel.loadCities()&#10;&#10;        // Charger une ville par défaut si aucune donnée&#10;        if (weatherUiState.weather == null &amp;&amp; !weatherUiState.isLoading) {&#10;            weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                        MaterialTheme.colorScheme.background&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        // Top Bar&#10;        TopBar(&#10;            onLocationClick = {&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            },&#10;            onCitiesClick = { showBottomSheet = true }&#10;        )&#10;&#10;        // Contenu principal&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentPadding = PaddingValues(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            // Carte météo principale&#10;            item {&#10;                when {&#10;                    weatherUiState.isLoading -&gt; {&#10;                        LoadingCard()&#10;                    }&#10;&#10;                    weatherUiState.errorMessage != null -&gt; {&#10;                        val errorMessage = weatherUiState.errorMessage!! // Force unwrap car on vérifie != null&#10;                        ErrorCard(&#10;                            errorMessage = errorMessage,&#10;                            onRetry = { weatherViewModel.loadWeatherForCity(&quot;Paris&quot;) }&#10;                        )&#10;                    }&#10;&#10;                    weatherUiState.weather != null -&gt; {&#10;                        val weather = weatherUiState.weather!! // Force unwrap car on vérifie != null&#10;                        WeatherCard(&#10;                            weather = weather,&#10;                            cityName = weatherUiState.cityName.ifEmpty { &quot;Ma position&quot; },&#10;                            onRefresh = {&#10;                                if (weatherUiState.cityName.isNotEmpty()) {&#10;                                    weatherViewModel.loadWeatherForCity(weatherUiState.cityName)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    else -&gt; {&#10;                        EmptyStateCard()&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Indicateurs météo détaillés&#10;            weatherUiState.weather?.let { weather -&gt;&#10;                if (!weatherUiState.isLoading) {&#10;                    item {&#10;                        WeatherIndicators(weather = weather)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Liste des villes favorites&#10;            item {&#10;                CitiesSection(&#10;                    cities = cityUiState.cities,&#10;                    onCityClick = { city -&gt;&#10;                        weatherViewModel.loadWeatherForCity(city.name)&#10;                    },&#10;                    onAddCityClick = { showBottomSheet = true }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Bottom Sheet pour la gestion des villes&#10;    if (showBottomSheet) {&#10;        CityBottomSheet(&#10;            cities = cityUiState.cities,&#10;            isLoading = cityUiState.isLoading,&#10;            onCitySelected = { city -&gt;&#10;                weatherViewModel.loadWeatherForCity(city.name)&#10;                showBottomSheet = false&#10;            },&#10;            onAddCity = { cityName -&gt;&#10;                cityViewModel.createCity(cityName)&#10;            },&#10;            onDeleteCity = { city -&gt;&#10;                cityViewModel.deleteCity(city)&#10;            },&#10;            onDismiss = { showBottomSheet = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun TopBar(&#10;    onLocationClick: () -&gt; Unit,&#10;    onCitiesClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            Text(&#10;                text = &quot;ClimatScope&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        actions = {&#10;            IconButton(onClick = onLocationClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.MyLocation,&#10;                    contentDescription = &quot;Ma position&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            IconButton(onClick = onCitiesClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.List,&#10;                    contentDescription = &quot;Mes villes&quot;&#10;                )&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = Color.Transparent&#10;        ),&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun LoadingCard() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(48.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        CircularProgressIndicator(&#10;            modifier = Modifier.size(48.dp),&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Text(&#10;            text = &quot;Chargement de la météo...&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorCard(&#10;    errorMessage: String?,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Error,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Erreur de chargement&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;            Text(&#10;                text = errorMessage,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Button(&#10;                onClick = onRetry,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(Icons.Default.Refresh, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Réessayer&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherCard(&#10;    weather: Weather?,&#10;    cityName: String,&#10;    onRefresh: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = cityName,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = weather.description,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                IconButton(onClick = onRefresh) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Refresh,&#10;                        contentDescription = &quot;Actualiser&quot;&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Text(&#10;                text = &quot;${weather.temperature.toInt()}°&quot;,&#10;                style = MaterialTheme.typography.displayLarge,&#10;                fontWeight = FontWeight.Light,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Ressenti ${weather.feelsLike.toInt()}��&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherIndicators(&#10;    weather: Weather,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        WeatherIndicatorCard(&#10;            title = &quot;Humidité&quot;,&#10;            value = &quot;${weather.humidity}%&quot;,&#10;            icon = Icons.Default.Opacity,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;&#10;        WeatherIndicatorCard(&#10;            title = &quot;Pression&quot;,&#10;            value = &quot;${weather.pressure} hPa&quot;,&#10;            icon = Icons.Default.BarChart,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;&#10;        WeatherIndicatorCard(&#10;            title = &quot;Vent&quot;,&#10;            value = &quot;${weather.windSpeed.toInt()} km/h&quot;,&#10;            icon = Icons.Default.Air,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherIndicatorCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CitiesSection(&#10;    cities: List&lt;City&gt;,&#10;    onCityClick: (City) -&gt; Unit,&#10;    onAddCityClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(modifier = modifier) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Mes villes&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            TextButton(onClick = onAddCityClick) {&#10;                Icon(Icons.Default.Add, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Ajouter&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        if (cities.isEmpty()) {&#10;            EmptyStateCard()&#10;        } else {&#10;            LazyRow(&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(cities) { city -&gt;&#10;                    CityCard(&#10;                        city = city,&#10;                        onClick = { onCityClick(city) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyStateCard() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Cloud,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(48.dp),&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = &quot;Aucune ville ajoutée&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Medium,&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Ajoutez vos villes favorites pour suivre leur météo&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CityCard(&#10;    city: City,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier.width(120.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.LocationCity,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = city.name,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 2&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CityBottomSheet(&#10;    cities: List&lt;City&gt;,&#10;    isLoading: Boolean,&#10;    onCitySelected: (City) -&gt; Unit,&#10;    onAddCity: (String) -&gt; Unit,&#10;    onDeleteCity: (City) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    // Utilisation du composant EnhancedCityBottomSheet existant&#10;    EnhancedCityBottomSheet(&#10;        cities = cities,&#10;        isLoading = isLoading,&#10;        onCitySelected = onCitySelected,&#10;        onAddCity = onAddCity,&#10;        onDeleteCity = onDeleteCity,&#10;        onDismiss = onDismiss&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    ClimatScopeTheme {&#10;        // Preview avec des données factices&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import android.Manifest&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import com.myapp.climatscope.presentation.components.*&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    weatherViewModel: WeatherViewModel,&#10;    cityViewModel: CityViewModel = viewModel()&#10;) {&#10;    val cityUiState by cityViewModel.uiState.collectAsState()&#10;    val weatherUiState by weatherViewModel.uiState.collectAsState()&#10;    var showBottomSheet by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;    val app = context.applicationContext as ClimatScopeApplication&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Gestionnaire de permissions de géolocalisation&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;&#10;        if (fineLocationGranted || coarseLocationGranted) {&#10;            scope.launch {&#10;                try {&#10;                    val result = app.dependencyContainer.getWeatherByLocationUseCase().invoke()&#10;                    result.fold(&#10;                        onSuccess = { (weather, _) -&gt;&#10;                            weatherViewModel.setLocationWeather(&#10;                                weather,&#10;                                &quot;Ma position&quot;&#10;                            )&#10;                        },&#10;                        onFailure = { error -&gt;&#10;                            println(&quot;Erreur de géolocalisation: ${error.message}&quot;)&#10;                            weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;                        }&#10;                    )&#10;                } catch (e: Exception) {&#10;                    println(&quot;Erreur lors de la récupération de la localisation: ${e.message}&quot;)&#10;                    weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Chargement initial des données&#10;    LaunchedEffect(Unit) {&#10;        cityViewModel.loadCities()&#10;&#10;        // Charger une ville par défaut si aucune donnée&#10;        if (weatherUiState.weather == null &amp;&amp; !weatherUiState.isLoading) {&#10;            weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                        MaterialTheme.colorScheme.background&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        // Top Bar&#10;        TopBar(&#10;            onLocationClick = {&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            },&#10;            onCitiesClick = { showBottomSheet = true }&#10;        )&#10;&#10;        // Contenu principal&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentPadding = PaddingValues(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            // Carte météo principale&#10;            item {&#10;                when {&#10;                    weatherUiState.isLoading -&gt; {&#10;                        LoadingCard()&#10;                    }&#10;&#10;                    weatherUiState.errorMessage != null -&gt; {&#10;                        val errorMessage = weatherUiState.errorMessage!! // Force unwrap car on vérifie != null&#10;                        ErrorCard(&#10;                            errorMessage = errorMessage,&#10;                            onRetry = { weatherViewModel.loadWeatherForCity(&quot;Paris&quot;) }&#10;                        )&#10;                    }&#10;&#10;                    weatherUiState.weather != null -&gt; {&#10;                        val weather = weatherUiState.weather!! // Force unwrap car on vérifie != null&#10;                        WeatherCard(&#10;                            weather = weather,&#10;                            cityName = weatherUiState.cityName.ifEmpty { &quot;Ma position&quot; },&#10;                            onRefresh = {&#10;                                if (weatherUiState.cityName.isNotEmpty()) {&#10;                                    weatherViewModel.loadWeatherForCity(weatherUiState.cityName)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    else -&gt; {&#10;                        EmptyStateCard()&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Indicateurs météo détaillés&#10;            weatherUiState.weather?.let { weather -&gt;&#10;                if (!weatherUiState.isLoading) {&#10;                    item {&#10;                        WeatherIndicators(weather = weather)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Liste des villes favorites&#10;            item {&#10;                CitiesSection(&#10;                    cities = cityUiState.cities,&#10;                    onCityClick = { city -&gt;&#10;                        weatherViewModel.loadWeatherForCity(city.name)&#10;                    },&#10;                    onAddCityClick = { showBottomSheet = true }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Bottom Sheet pour la gestion des villes&#10;    if (showBottomSheet) {&#10;        CityBottomSheet(&#10;            cities = cityUiState.cities,&#10;            isLoading = cityUiState.isLoading,&#10;            onCitySelected = { city -&gt;&#10;                weatherViewModel.loadWeatherForCity(city.name)&#10;                showBottomSheet = false&#10;            },&#10;            onAddCity = { cityName -&gt;&#10;                cityViewModel.createCity(cityName)&#10;            },&#10;            onDeleteCity = { city -&gt;&#10;                cityViewModel.deleteCity(city)&#10;            },&#10;            onDismiss = { showBottomSheet = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun TopBar(&#10;    onLocationClick: () -&gt; Unit,&#10;    onCitiesClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            Text(&#10;                text = &quot;ClimatScope&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        actions = {&#10;            IconButton(onClick = onLocationClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.MyLocation,&#10;                    contentDescription = &quot;Ma position&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            IconButton(onClick = onCitiesClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.List,&#10;                    contentDescription = &quot;Mes villes&quot;&#10;                )&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = Color.Transparent&#10;        ),&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun LoadingCard() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(48.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        CircularProgressIndicator(&#10;            modifier = Modifier.size(48.dp),&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Text(&#10;            text = &quot;Chargement de la météo...&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorCard(&#10;    errorMessage: String?,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Error,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Erreur de chargement&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;            Text(&#10;                text = errorMessage,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Button(&#10;                onClick = onRetry,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(Icons.Default.Refresh, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Réessayer&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherCard(&#10;    weather: Weather,&#10;    cityName: String,&#10;    onRefresh: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = cityName,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = weather.description,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                IconButton(onClick = onRefresh) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Refresh,&#10;                        contentDescription = &quot;Actualiser&quot;&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Text(&#10;                text = &quot;${weather.temperature.toInt()}°&quot;,&#10;                style = MaterialTheme.typography.displayLarge,&#10;                fontWeight = FontWeight.Light,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Ressenti ${weather.feelsLike.toInt()}°&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherIndicators(&#10;    weather: Weather,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        WeatherIndicatorCard(&#10;            title = &quot;Humidité&quot;,&#10;            value = &quot;${weather.humidity}%&quot;,&#10;            icon = Icons.Default.Opacity,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;&#10;        WeatherIndicatorCard(&#10;            title = &quot;Pression&quot;,&#10;            value = &quot;${weather.pressure} hPa&quot;,&#10;            icon = Icons.Default.BarChart,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;&#10;        WeatherIndicatorCard(&#10;            title = &quot;Vent&quot;,&#10;            value = &quot;${weather.windSpeed.toInt()} km/h&quot;,&#10;            icon = Icons.Default.Air,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherIndicatorCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CitiesSection(&#10;    cities: List&lt;City&gt;,&#10;    onCityClick: (City) -&gt; Unit,&#10;    onAddCityClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(modifier = modifier) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Mes villes&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            TextButton(onClick = onAddCityClick) {&#10;                Icon(Icons.Default.Add, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Ajouter&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        if (cities.isEmpty()) {&#10;            EmptyStateCard()&#10;        } else {&#10;            LazyRow(&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(cities) { city -&gt;&#10;                    CityCard(&#10;                        city = city,&#10;                        onClick = { onCityClick(city) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyStateCard() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Cloud,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(48.dp),&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = &quot;Aucune ville ajoutée&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Medium,&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Ajoutez vos villes favorites pour suivre leur météo&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CityCard(&#10;    city: City,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier.width(120.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.LocationCity,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = city.name,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 2&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CityBottomSheet(&#10;    cities: List&lt;City&gt;,&#10;    isLoading: Boolean,&#10;    onCitySelected: (City) -&gt; Unit,&#10;    onAddCity: (String) -&gt; Unit,&#10;    onDeleteCity: (City) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    // Utilisation du composant EnhancedCityBottomSheet existant&#10;    EnhancedCityBottomSheet(&#10;        cities = cities,&#10;        isLoading = isLoading,&#10;        onCitySelected = onCitySelected,&#10;        onAddCity = onAddCity,&#10;        onDeleteCity = onDeleteCity,&#10;        onDismiss = onDismiss&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    ClimatScopeTheme {&#10;        // Preview avec des données factices&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/LocationPermissionScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/LocationPermissionScreen.kt" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import android.Manifest&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LocationPermissionScreen(&#10;    onLocationGranted: () -&gt; Unit,&#10;    onLocationDenied: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val app = context.applicationContext as ClimatScopeApplication&#10;    val scope = rememberCoroutineScope()&#10;    &#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;        &#10;        if (fineLocationGranted || coarseLocationGranted) {&#10;            scope.launch {&#10;                try {&#10;                    val result = app.dependencyContainer.getWeatherByLocationUseCase().invoke()&#10;                    result.fold(&#10;                        onSuccess = { weatherLocationPair -&gt;&#10;                            onLocationGranted()&#10;                        },&#10;                        onFailure = { &#10;                            onLocationDenied()&#10;                        }&#10;                    )&#10;                } catch (e: Exception) {&#10;                    onLocationDenied()&#10;                }&#10;            }&#10;        } else {&#10;            onLocationDenied()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.LocationOn,&#10;            contentDescription = null,&#10;            modifier = Modifier.size(80.dp),&#10;            tint = MaterialTheme.colorScheme.primary&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(32.dp))&#10;        &#10;        Text(&#10;            text = &quot;ClimaSense&quot;,&#10;            fontSize = 32.sp,&#10;            fontWeight = FontWeight.Medium,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            textAlign = TextAlign.Center&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        &#10;        Text(&#10;            text = &quot;Pour vous fournir des informations météo précises&quot;,&#10;            fontSize = 18.sp,&#10;            color = MaterialTheme.colorScheme.onBackground,&#10;            textAlign = TextAlign.Center&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        &#10;        Text(&#10;            text = &quot;Nous avons besoin d'accéder à votre localisation&quot;,&#10;            fontSize = 16.sp,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(48.dp))&#10;        &#10;        Button(&#10;            onClick = {&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.primary&#10;            )&#10;        ) {&#10;            Text(&#10;                text = &quot;Autoriser l'accès à la localisation&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        &#10;        TextButton(&#10;            onClick = onLocationDenied,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&#10;                text = &quot;Choisir manuellement une ville&quot;,&#10;                fontSize = 16.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun LocationPermissionScreenPreview() {&#10;    ClimatScopeTheme {&#10;        LocationPermissionScreen(&#10;            onLocationGranted = {},&#10;            onLocationDenied = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/ModernHomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/ModernHomeScreen.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import android.Manifest&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import coil.compose.AsyncImage&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import com.myapp.climatscope.presentation.components.*&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ModernHomeScreen(&#10;    onCityClick: (City) -&gt; Unit,&#10;    cityViewModel: CityViewModel = viewModel(),&#10;    weatherViewModel: WeatherViewModel = viewModel()&#10;) {&#10;    val cityUiState by cityViewModel.uiState.collectAsState()&#10;    val weatherUiState by weatherViewModel.uiState.collectAsState()&#10;    var showBottomSheet by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;    val app = context.applicationContext as ClimatScopeApplication&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Gestionnaire de permissions de géolocalisation moderne&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;&#10;        if (fineLocationGranted || coarseLocationGranted) {&#10;            scope.launch {&#10;                try {&#10;                    val result = app.dependencyContainer.getWeatherByLocationUseCase().invoke()&#10;                    result.fold(&#10;                        onSuccess = { (weather, location) -&gt;&#10;                            weatherViewModel.setLocationWeather(weather, &quot;Ma position (${location.latitude.toInt()}, ${location.longitude.toInt()})&quot;)&#10;                        },&#10;                        onFailure = { error -&gt;&#10;                            println(&quot;Erreur de géolocalisation: ${error.message}&quot;)&#10;                            weatherViewModel.loadWeatherForCity(&quot;Paris&quot;) // Ville par défaut&#10;                        }&#10;                    )&#10;                } catch (e: Exception) {&#10;                    println(&quot;Erreur lors de la récupération de la localisation: ${e.message}&quot;)&#10;                    weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Chargement initial des données&#10;    LaunchedEffect(Unit) {&#10;        cityViewModel.loadCities()&#10;&#10;        // Charger une ville par défaut&#10;        if (cityUiState.cities.isNotEmpty()) {&#10;            val firstCity = cityUiState.cities.first()&#10;            weatherViewModel.loadWeatherForCity(firstCity.name)&#10;        } else {&#10;            weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                        MaterialTheme.colorScheme.background&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        // Top Bar moderne avec géolocalisation&#10;        ModernTopBar(&#10;            onLocationClick = {&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            },&#10;            onCitiesClick = { showBottomSheet = true }&#10;        )&#10;&#10;        // Contenu principal&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentPadding = PaddingValues(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            // Indicateur de chargement ou carte météo principale&#10;            item {&#10;                val currentWeather = weatherUiState.weather&#10;                val currentError = weatherUiState.errorMessage&#10;&#10;                if (weatherUiState.isLoading) {&#10;                    // Afficher un indicateur de chargement&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(48.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(48.dp),&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Chargement de la météo...&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                } else if (currentError != null) {&#10;                    // Afficher une carte d'erreur avec possibilité de retry&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shape = RoundedCornerShape(24.dp),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(24.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Error,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.error,&#10;                                modifier = Modifier.size(48.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Erreur de chargement&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                            Text(&#10;                                text = weatherUiState.errorMessage ?: &quot;Erreur inconnue&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Button(&#10;                                onClick = {&#10;                                    weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;                                },&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = MaterialTheme.colorScheme.error&#10;                                )&#10;                            ) {&#10;                                Icon(Icons.Default.Refresh, contentDescription = null)&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&quot;Réessayer&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                } else if (weatherUiState.weather != null) {&#10;                    // Afficher la carte météo normale si on a des données&#10;                    weatherUiState.weather?.let { weather -&gt;&#10;                        ModernWeatherCard(&#10;                            weather = weather,&#10;                            cityName = weatherUiState.cityName.ifEmpty { &quot;Ma position&quot; },&#10;                            onRefresh = {&#10;                                if (weatherUiState.cityName.isNotEmpty()) {&#10;                                    weatherViewModel.loadWeatherForCity(weatherUiState.cityName)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Indicateurs météo détaillés - seulement si on a des données&#10;            weatherUiState.weather?.let { currentWeather -&gt;&#10;                if (!weatherUiState.isLoading) {&#10;                    item {&#10;                        ModernWeatherIndicators(weather = currentWeather)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Carte de conseils météo - seulement si on a des données&#10;            weatherUiState.weather?.let { currentWeather -&gt;&#10;                if (!weatherUiState.isLoading) {&#10;                    item {&#10;                        WeatherAdviceCard(weather = currentWeather)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Liste des villes favorites&#10;            item {&#10;                ModernCitiesSection(&#10;                    cities = cityUiState.cities,&#10;                    onCityClick = onCityClick,&#10;                    onAddCityClick = { showBottomSheet = true }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Bottom Sheet pour la gestion des villes&#10;    if (showBottomSheet) {&#10;        EnhancedCityBottomSheet(&#10;            cities = cityUiState.cities,&#10;            isLoading = cityUiState.isLoading,&#10;            onCitySelected = { city -&gt;&#10;                onCityClick(city)&#10;                weatherViewModel.loadWeatherForCity(city.name)&#10;                showBottomSheet = false&#10;            },&#10;            onAddCity = { cityName -&gt;&#10;                cityViewModel.createCity(cityName)&#10;            },&#10;            onDeleteCity = { city -&gt;&#10;                cityViewModel.deleteCity(city)&#10;            },&#10;            onDismiss = { showBottomSheet = false }&#10;        )&#10;    }&#10;&#10;    // Gestion des états d'erreur&#10;    weatherUiState.errorMessage?.let { error -&gt;&#10;        LaunchedEffect(error) {&#10;            // Afficher un snackbar d'erreur ou gérer l'erreur&#10;            println(&quot;Erreur météo: $error&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ModernTopBar(&#10;    onLocationClick: () -&gt; Unit,&#10;    onCitiesClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            Text(&#10;                text = &quot;ClimatScope&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        actions = {&#10;            IconButton(onClick = onLocationClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.MyLocation,&#10;                    contentDescription = &quot;Ma position&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            IconButton(onClick = onCitiesClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.List,&#10;                    contentDescription = &quot;Mes villes&quot;&#10;                )&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = Color.Transparent&#10;        ),&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun ModernWeatherCard(&#10;    weather: Weather,&#10;    cityName: String,&#10;    onRefresh: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = cityName,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = weather.description,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                IconButton(onClick = onRefresh) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Refresh,&#10;                        contentDescription = &quot;Actualiser&quot;&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Température principale&#10;            Text(&#10;                text = &quot;${weather.temperature.toInt()}°&quot;,&#10;                style = MaterialTheme.typography.displayLarge,&#10;                fontWeight = FontWeight.Light,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Ressenti ${weather.feelsLike.toInt()}°&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ModernWeatherIndicators(&#10;    weather: Weather,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        WeatherIndicatorCard(&#10;            title = &quot;Humidité&quot;,&#10;            value = &quot;${weather.humidity}%&quot;,&#10;            icon = Icons.Default.Opacity, // Remplace WaterDrop par Opacity&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;&#10;        WeatherIndicatorCard(&#10;            title = &quot;Pression&quot;,&#10;            value = &quot;${weather.pressure} hPa&quot;,&#10;            icon = Icons.Default.BarChart, // Remplace Speed par BarChart&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;&#10;        WeatherIndicatorCard(&#10;            title = &quot;Vent&quot;,&#10;            value = &quot;${weather.windSpeed.toInt()} km/h&quot;,&#10;            icon = Icons.Default.Air,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherIndicatorCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ModernCitiesSection(&#10;    cities: List&lt;City&gt;,&#10;    onCityClick: (City) -&gt; Unit,&#10;    onAddCityClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(modifier = modifier) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Mes villes&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            TextButton(onClick = onAddCityClick) {&#10;                Icon(Icons.Default.Add, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Ajouter&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        if (cities.isEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Cloud,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(48.dp),&#10;                        tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    Text(&#10;                        text = &quot;Aucune ville ajoutée&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Ajoutez vos villes favorites pour suivre leur météo&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            LazyRow(&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(cities) { city -&gt;&#10;                    CityQuickCard(&#10;                        city = city,&#10;                        onClick = { onCityClick(city) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CityQuickCard(&#10;    city: City,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier.width(120.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.LocationCity,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = city.name,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 2&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ModernHomeScreenPreview() {&#10;    ClimatScopeTheme {&#10;        ModernHomeScreen(&#10;            onCityClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import android.Manifest&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import coil.compose.AsyncImage&#10;import com.myapp.climatscope.ClimatScopeApplication&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import com.myapp.climatscope.presentation.components.*&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import com.myapp.climatscope.presentation.viewmodels.CityViewModel&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ModernHomeScreen(&#10;    onCityClick: (City) -&gt; Unit,&#10;    cityViewModel: CityViewModel = viewModel(),&#10;    weatherViewModel: WeatherViewModel = viewModel()&#10;) {&#10;    val cityUiState by cityViewModel.uiState.collectAsState()&#10;    val weatherUiState by weatherViewModel.uiState.collectAsState()&#10;    var showBottomSheet by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;    val app = context.applicationContext as ClimatScopeApplication&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Gestionnaire de permissions de géolocalisation moderne&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;&#10;        if (fineLocationGranted || coarseLocationGranted) {&#10;            scope.launch {&#10;                try {&#10;                    val result = app.dependencyContainer.getWeatherByLocationUseCase().invoke()&#10;                    result.fold(&#10;                        onSuccess = { (weather, location) -&gt;&#10;                            weatherViewModel.setLocationWeather(weather, &quot;Ma position (${location.latitude.toInt()}, ${location.longitude.toInt()})&quot;)&#10;                        },&#10;                        onFailure = { error -&gt;&#10;                            println(&quot;Erreur de géolocalisation: ${error.message}&quot;)&#10;                            weatherViewModel.loadWeatherForCity(&quot;Paris&quot;) // Ville par défaut&#10;                        }&#10;                    )&#10;                } catch (e: Exception) {&#10;                    println(&quot;Erreur lors de la récupération de la localisation: ${e.message}&quot;)&#10;                    weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Chargement initial des données&#10;    LaunchedEffect(Unit) {&#10;        cityViewModel.loadCities()&#10;&#10;        // Charger une ville par défaut&#10;        if (cityUiState.cities.isNotEmpty()) {&#10;            val firstCity = cityUiState.cities.first()&#10;            weatherViewModel.loadWeatherForCity(firstCity.name)&#10;        } else {&#10;            weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                        MaterialTheme.colorScheme.background&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        // Top Bar moderne avec géolocalisation&#10;        ModernTopBar(&#10;            onLocationClick = {&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            },&#10;            onCitiesClick = { showBottomSheet = true }&#10;        )&#10;&#10;        // Contenu principal&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentPadding = PaddingValues(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            // Indicateur de chargement ou carte météo principale&#10;            item {&#10;                when {&#10;                    weatherUiState.isLoading -&gt; {&#10;                        // Afficher un indicateur de chargement&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(48.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(48.dp),&#10;                                color = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Chargement de la météo...&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                    &#10;                    weatherUiState.errorMessage != null -&gt; {&#10;                        // Afficher une carte d'erreur avec possibilité de retry&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            shape = RoundedCornerShape(24.dp),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.errorContainer&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(24.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Error,&#10;                                    contentDescription = null,&#10;                                    tint = MaterialTheme.colorScheme.error,&#10;                                    modifier = Modifier.size(48.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;                                Text(&#10;                                    text = &quot;Erreur de chargement&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                                )&#10;                                Text(&#10;                                    text = weatherUiState.errorMessage,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.onErrorContainer,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;                                Button(&#10;                                    onClick = {&#10;                                        weatherViewModel.loadWeatherForCity(&quot;Paris&quot;)&#10;                                    },&#10;                                    colors = ButtonDefaults.buttonColors(&#10;                                        containerColor = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                ) {&#10;                                    Icon(Icons.Default.Refresh, contentDescription = null)&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&quot;Réessayer&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    weatherUiState.weather != null -&gt; {&#10;                        // Afficher la carte météo normale&#10;                        ModernWeatherCard(&#10;                            weather = weatherUiState.weather,&#10;                            cityName = weatherUiState.cityName.ifEmpty { &quot;Ma position&quot; },&#10;                            onRefresh = {&#10;                                if (weatherUiState.cityName.isNotEmpty()) {&#10;                                    weatherViewModel.loadWeatherForCity(weatherUiState.cityName)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                    &#10;                    else -&gt; {&#10;                        // État initial - afficher un message par défaut&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            shape = RoundedCornerShape(24.dp),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(24.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Cloud,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(48.dp),&#10;                                    tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Spacer(modifier = Modifier.height(12.dp))&#10;                                Text(&#10;                                    text = &quot;Aucune donnée météo&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Appuyez sur le bouton de localisation ou ajoutez une ville&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Indicateurs météo détaillés - seulement si on a des données&#10;            weatherUiState.weather?.let { currentWeather -&gt;&#10;                if (!weatherUiState.isLoading) {&#10;                    item {&#10;                        ModernWeatherIndicators(weather = currentWeather)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Carte de conseils météo - seulement si on a des données&#10;            weatherUiState.weather?.let { currentWeather -&gt;&#10;                if (!weatherUiState.isLoading) {&#10;                    item {&#10;                        WeatherAdviceCard(weather = currentWeather)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Liste des villes favorites&#10;            item {&#10;                ModernCitiesSection(&#10;                    cities = cityUiState.cities,&#10;                    onCityClick = onCityClick,&#10;                    onAddCityClick = { showBottomSheet = true }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Bottom Sheet pour la gestion des villes&#10;    if (showBottomSheet) {&#10;        EnhancedCityBottomSheet(&#10;            cities = cityUiState.cities,&#10;            isLoading = cityUiState.isLoading,&#10;            onCitySelected = { city -&gt;&#10;                onCityClick(city)&#10;                weatherViewModel.loadWeatherForCity(city.name)&#10;                showBottomSheet = false&#10;            },&#10;            onAddCity = { cityName -&gt;&#10;                cityViewModel.createCity(cityName)&#10;            },&#10;            onDeleteCity = { city -&gt;&#10;                cityViewModel.deleteCity(city)&#10;            },&#10;            onDismiss = { showBottomSheet = false }&#10;        )&#10;    }&#10;&#10;    // Gestion des états d'erreur&#10;    weatherUiState.errorMessage?.let { error -&gt;&#10;        LaunchedEffect(error) {&#10;            // Afficher un snackbar d'erreur ou gérer l'erreur&#10;            println(&quot;Erreur météo: $error&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ModernTopBar(&#10;    onLocationClick: () -&gt; Unit,&#10;    onCitiesClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            Text(&#10;                text = &quot;ClimatScope&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        actions = {&#10;            IconButton(onClick = onLocationClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.MyLocation,&#10;                    contentDescription = &quot;Ma position&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            IconButton(onClick = onCitiesClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.List,&#10;                    contentDescription = &quot;Mes villes&quot;&#10;                )&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = Color.Transparent&#10;        ),&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun ModernWeatherCard(&#10;    weather: Weather,&#10;    cityName: String,&#10;    onRefresh: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = cityName,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = weather.description,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                IconButton(onClick = onRefresh) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Refresh,&#10;                        contentDescription = &quot;Actualiser&quot;&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Température principale&#10;            Text(&#10;                text = &quot;${weather.temperature.toInt()}°&quot;,&#10;                style = MaterialTheme.typography.displayLarge,&#10;                fontWeight = FontWeight.Light,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Ressenti ${weather.feelsLike.toInt()}°&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ModernWeatherIndicators(&#10;    weather: Weather,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        WeatherIndicatorCard(&#10;            title = &quot;Humidité&quot;,&#10;            value = &quot;${weather.humidity}%&quot;,&#10;            icon = Icons.Default.Opacity, // Remplace WaterDrop par Opacity&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;&#10;        WeatherIndicatorCard(&#10;            title = &quot;Pression&quot;,&#10;            value = &quot;${weather.pressure} hPa&quot;,&#10;            icon = Icons.Default.BarChart, // Remplace Speed par BarChart&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;&#10;        WeatherIndicatorCard(&#10;            title = &quot;Vent&quot;,&#10;            value = &quot;${weather.windSpeed.toInt()} km/h&quot;,&#10;            icon = Icons.Default.Air,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherIndicatorCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ModernCitiesSection(&#10;    cities: List&lt;City&gt;,&#10;    onCityClick: (City) -&gt; Unit,&#10;    onAddCityClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(modifier = modifier) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Mes villes&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            TextButton(onClick = onAddCityClick) {&#10;                Icon(Icons.Default.Add, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Ajouter&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        if (cities.isEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Cloud,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(48.dp),&#10;                        tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    Text(&#10;                        text = &quot;Aucune ville ajoutée&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Ajoutez vos villes favorites pour suivre leur météo&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            LazyRow(&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(cities) { city -&gt;&#10;                    CityQuickCard(&#10;                        city = city,&#10;                        onClick = { onCityClick(city) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CityQuickCard(&#10;    city: City,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier.width(120.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.LocationCity,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = city.name,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 2&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ModernHomeScreenPreview() {&#10;    ClimatScopeTheme {&#10;        ModernHomeScreen(&#10;            onCityClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/WeatherScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/screens/WeatherScreen.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import coil.compose.AsyncImage&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun WeatherScreen(&#10;    cityName: String,&#10;    onBackClick: () -&gt; Unit,&#10;    viewModel: WeatherViewModel = viewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    // Charger la météo au premier affichage&#10;    LaunchedEffect(cityName) {&#10;        viewModel.loadWeatherForCity(cityName)&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(cityName) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Retour&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { viewModel.refreshWeather() }) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = &quot;Actualiser&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;                uiState.weather != null -&gt; {&#10;                    WeatherContent(&#10;                        weather = uiState.weather!!,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;                uiState.errorMessage != null -&gt; {&#10;                    ErrorMessage(&#10;                        message = uiState.errorMessage!!,&#10;                        onRetry = { viewModel.loadWeatherForCity(cityName) },&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Gestion des erreurs avec SnackBar&#10;    uiState.errorMessage?.let { message -&gt;&#10;        LaunchedEffect(message) {&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherContent(&#10;    weather: Weather,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(24.dp)&#10;    ) {&#10;        // Icône météo&#10;        AsyncImage(&#10;            model = weather.iconUrl,&#10;            contentDescription = &quot;Icône météo&quot;,&#10;            modifier = Modifier.size(120.dp)&#10;        )&#10;&#10;        // Description&#10;        Text(&#10;            text = weather.description.replaceFirstChar { it.uppercase() },&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            textAlign = TextAlign.Center,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        // Température principale&#10;        Text(&#10;            text = &quot;${weather.temperature.toInt()}°C&quot;,&#10;            style = MaterialTheme.typography.displayLarge,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        // Détails météo&#10;        WeatherDetailsCard(weather = weather)&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherDetailsCard(weather: Weather) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Détails&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;&#10;            WeatherDetailRow(&#10;                label = &quot;Humidité&quot;,&#10;                value = &quot;${weather.humidity}%&quot;&#10;            )&#10;&#10;            WeatherDetailRow(&#10;                label = &quot;Pression&quot;,&#10;                value = &quot;${weather.pressure} hPa&quot;&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherDetailRow(&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorMessage(&#10;    message: String,&#10;    onRetry: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Erreur&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = MaterialTheme.colorScheme.error,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = message,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Button(onClick = onRetry) {&#10;            Text(&quot;Réessayer&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.tooling.preview.PreviewParameter&#10;import androidx.compose.ui.tooling.preview.PreviewParameterProvider&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import coil.compose.AsyncImage&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import com.myapp.climatscope.presentation.theme.ClimatScopeTheme&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun WeatherScreen(&#10;    cityName: String,&#10;    onBackClick: () -&gt; Unit,&#10;    viewModel: WeatherViewModel = viewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    // Charger la météo au premier affichage&#10;    LaunchedEffect(cityName) {&#10;        viewModel.loadWeatherForCity(cityName)&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(cityName) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Retour&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { viewModel.refreshWeather() }) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = &quot;Actualiser&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;                uiState.weather != null -&gt; {&#10;                    WeatherContent(&#10;                        weather = uiState.weather!!,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;                uiState.errorMessage != null -&gt; {&#10;                    ErrorMessage(&#10;                        message = uiState.errorMessage!!,&#10;                        onRetry = { viewModel.loadWeatherForCity(cityName) },&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Gestion des erreurs avec SnackBar&#10;    uiState.errorMessage?.let { message -&gt;&#10;        LaunchedEffect(message) {&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherContent(&#10;    weather: Weather,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(24.dp)&#10;    ) {&#10;        // Icône météo&#10;        AsyncImage(&#10;            model = weather.iconUrl,&#10;            contentDescription = &quot;Icône météo&quot;,&#10;            modifier = Modifier.size(120.dp)&#10;        )&#10;&#10;        // Description&#10;        Text(&#10;            text = weather.description.replaceFirstChar { it.uppercase() },&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            textAlign = TextAlign.Center,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        // Température principale&#10;        Text(&#10;            text = &quot;${weather.temperature.toInt()}°C&quot;,&#10;            style = MaterialTheme.typography.displayLarge,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        // Détails météo&#10;        WeatherDetailsCard(weather = weather)&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherDetailsCard(weather: Weather) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Détails&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;&#10;            WeatherDetailRow(&#10;                label = &quot;Humidité&quot;,&#10;                value = &quot;${weather.humidity}%&quot;&#10;            )&#10;&#10;            WeatherDetailRow(&#10;                label = &quot;Pression&quot;,&#10;                value = &quot;${weather.pressure} hPa&quot;&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WeatherDetailRow(&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorMessage(&#10;    message: String,&#10;    onRetry: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Erreur&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = MaterialTheme.colorScheme.error,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        &#10;        Text(&#10;            text = message,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        &#10;        Button(onClick = onRetry) {&#10;            Text(&quot;Réessayer&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;// ========== PREVIEWS ==========&#10;&#10;class WeatherPreviewParameterProvider : PreviewParameterProvider&lt;Weather&gt; {&#10;    override val values = sequenceOf(&#10;        // Temps ensoleillé&#10;        Weather(&#10;            description = &quot;ensoleillé&quot;,&#10;            temperature = 25.5,&#10;            humidity = 60,&#10;            pressure = 1013,&#10;            iconUrl = &quot;https://openweathermap.org/img/wn/01d.png&quot;&#10;        ),&#10;        // Temps pluvieux&#10;        Weather(&#10;            description = &quot;pluie légère&quot;,&#10;            temperature = 15.2,&#10;            humidity = 85,&#10;            pressure = 1008,&#10;            iconUrl = &quot;https://openweathermap.org/img/wn/10d.png&quot;&#10;        ),&#10;        // Temps neigeux&#10;        Weather(&#10;            description = &quot;neige&quot;,&#10;            temperature = -2.0,&#10;            humidity = 95,&#10;            pressure = 1020,&#10;            iconUrl = &quot;https://openweathermap.org/img/wn/13d.png&quot;&#10;        ),&#10;        // Temps très chaud&#10;        Weather(&#10;            description = &quot;ciel dégagé&quot;,&#10;            temperature = 42.0,&#10;            humidity = 25,&#10;            pressure = 1005,&#10;            iconUrl = &quot;https://openweathermap.org/img/wn/01d.png&quot;&#10;        )&#10;    )&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Weather Screen - Light&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun WeatherScreenPreview() {&#10;    ClimatScopeTheme {&#10;        WeatherScreenContent(&#10;            cityName = &quot;Paris&quot;,&#10;            weather = Weather(&#10;                description = &quot;ensoleillé&quot;,&#10;                temperature = 25.5,&#10;                humidity = 60,&#10;                pressure = 1013,&#10;                iconUrl = &quot;https://openweathermap.org/img/wn/01d.png&quot;&#10;            ),&#10;            isLoading = false,&#10;            errorMessage = null,&#10;            onBackClick = {},&#10;            onRefreshClick = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Weather Screen - Dark&quot;,&#10;    showBackground = true,&#10;    uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES&#10;)&#10;@Composable&#10;private fun WeatherScreenDarkPreview() {&#10;    ClimatScopeTheme(darkTheme = true) {&#10;        WeatherScreenContent(&#10;            cityName = &quot;Londres&quot;,&#10;            weather = Weather(&#10;                description = &quot;nuageux&quot;,&#10;                temperature = 18.0,&#10;                humidity = 75,&#10;                pressure = 1010,&#10;                iconUrl = &quot;https://openweathermap.org/img/wn/04d.png&quot;&#10;            ),&#10;            isLoading = false,&#10;            errorMessage = null,&#10;            onBackClick = {},&#10;            onRefreshClick = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Loading State&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun WeatherLoadingPreview() {&#10;    ClimatScopeTheme {&#10;        WeatherScreenContent(&#10;            cityName = &quot;Tokyo&quot;,&#10;            weather = null,&#10;            isLoading = true,&#10;            errorMessage = null,&#10;            onBackClick = {},&#10;            onRefreshClick = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Error State&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun WeatherErrorPreview() {&#10;    ClimatScopeTheme {&#10;        WeatherScreenContent(&#10;            cityName = &quot;InvalidCity&quot;,&#10;            weather = null,&#10;            isLoading = false,&#10;            errorMessage = &quot;Impossible de récupérer les données météo pour cette ville&quot;,&#10;            onBackClick = {},&#10;            onRefreshClick = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Weather Content&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun WeatherContentPreview(@PreviewParameter(WeatherPreviewParameterProvider::class) weather: Weather) {&#10;    ClimatScopeTheme {&#10;        WeatherContent(&#10;            weather = weather,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Weather Details Card&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun WeatherDetailsCardPreview() {&#10;    ClimatScopeTheme {&#10;        WeatherDetailsCard(&#10;            weather = Weather(&#10;                description = &quot;ensoleillé&quot;,&#10;                temperature = 25.5,&#10;                humidity = 60,&#10;                pressure = 1013,&#10;                iconUrl = &quot;https://openweathermap.org/img/wn/01d.png&quot;&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Error Message&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun ErrorMessagePreview() {&#10;    ClimatScopeTheme {&#10;        ErrorMessage(&#10;            message = &quot;Impossible de charger les données météo. Vérifiez votre connexion internet.&quot;,&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Weather Detail Row&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun WeatherDetailRowPreview() {&#10;    ClimatScopeTheme {&#10;        Column {&#10;            WeatherDetailRow(label = &quot;Humidité&quot;, value = &quot;65%&quot;)&#10;            WeatherDetailRow(label = &quot;Pression&quot;, value = &quot;1013 hPa&quot;)&#10;            WeatherDetailRow(label = &quot;Température ressentie&quot;, value = &quot;28°C&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;// Composant séparé pour les previews (sans ViewModel)&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun WeatherScreenContent(&#10;    cityName: String,&#10;    weather: Weather?,&#10;    isLoading: Boolean,&#10;    errorMessage: String?,&#10;    onBackClick: () -&gt; Unit,&#10;    onRefreshClick: () -&gt; Unit,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(cityName) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Retour&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = onRefreshClick) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = &quot;Actualiser&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;                weather != null -&gt; {&#10;                    WeatherContent(&#10;                        weather = weather,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;                errorMessage != null -&gt; {&#10;                    ErrorMessage(&#10;                        message = errorMessage,&#10;                        onRetry = onRetry,&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/theme/Theme.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.presentation.theme&#10;&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Color(0xFF2196F3),&#10;    onPrimary = Color.White,&#10;    primaryContainer = Color(0xFFBBDEFB),&#10;    onPrimaryContainer = Color(0xFF0D47A1),&#10;    secondary = Color(0xFF03DAC6),&#10;    onSecondary = Color.Black,&#10;    surface = Color(0xFFFFFBFE),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    background = Color(0xFFFFFBFE),&#10;    onBackground = Color(0xFF1C1B1F),&#10;)&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Color(0xFF90CAF9),&#10;    onPrimary = Color(0xFF003258),&#10;    primaryContainer = Color(0xFF004881),&#10;    onPrimaryContainer = Color(0xFFBBDEFB),&#10;    secondary = Color(0xFF80CBC4),&#10;    onSecondary = Color(0xFF003A36),&#10;    surface = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFFE6E1E5),&#10;    background = Color(0xFF1C1B1F),&#10;    onBackground = Color(0xFFE6E1E5),&#10;)&#10;&#10;@Composable&#10;fun ClimatScopeTheme(&#10;    darkTheme: Boolean = false,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = if (darkTheme) DarkColorScheme else LightColorScheme&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}&#10;&#10;// ========== THEME PREVIEWS ==========&#10;&#10;@Preview(&#10;    name = &quot;Colors - Light Theme&quot;,&#10;    showBackground = true,&#10;    widthDp = 360,&#10;    heightDp = 400&#10;)&#10;@Composable&#10;private fun LightThemeColorsPreview() {&#10;    ClimatScopeTheme(darkTheme = false) {&#10;        ThemeColorsPalette()&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Colors - Dark Theme&quot;,&#10;    showBackground = true,&#10;    widthDp = 360,&#10;    heightDp = 400,&#10;    uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES&#10;)&#10;@Composable&#10;private fun DarkThemeColorsPreview() {&#10;    ClimatScopeTheme(darkTheme = true) {&#10;        ThemeColorsPalette()&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Typography&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun TypographyPreview() {&#10;    ClimatScopeTheme {&#10;        TypographyShowcase()&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Material Components&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun MaterialComponentsPreview() {&#10;    ClimatScopeTheme {&#10;        MaterialComponentsShowcase()&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ThemeColorsPalette() {&#10;    Column(&#10;        modifier = Modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Palette de Couleurs&quot;,&#10;            style = MaterialTheme.typography.headlineSmall&#10;        )&#10;&#10;        ColorCard(&quot;Primary&quot;, MaterialTheme.colorScheme.primary, MaterialTheme.colorScheme.onPrimary)&#10;        ColorCard(&quot;Secondary&quot;, MaterialTheme.colorScheme.secondary, MaterialTheme.colorScheme.onSecondary)&#10;        ColorCard(&quot;Surface&quot;, MaterialTheme.colorScheme.surface, MaterialTheme.colorScheme.onSurface)&#10;        ColorCard(&quot;Background&quot;, MaterialTheme.colorScheme.background, MaterialTheme.colorScheme.onBackground)&#10;        ColorCard(&quot;Error&quot;, MaterialTheme.colorScheme.error, MaterialTheme.colorScheme.onError)&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ColorCard(name: String, backgroundColor: Color, contentColor: Color) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth().height(60.dp),&#10;        colors = CardDefaults.cardColors(containerColor = backgroundColor)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize().padding(16.dp),&#10;            contentAlignment = androidx.compose.ui.Alignment.CenterStart&#10;        ) {&#10;            Text(&#10;                text = name,&#10;                color = contentColor,&#10;                style = MaterialTheme.typography.bodyLarge&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TypographyShowcase() {&#10;    Column(&#10;        modifier = Modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Text(&quot;Display Large&quot;, style = MaterialTheme.typography.displayLarge)&#10;        Text(&quot;Headline Large&quot;, style = MaterialTheme.typography.headlineLarge)&#10;        Text(&quot;Title Large&quot;, style = MaterialTheme.typography.titleLarge)&#10;        Text(&quot;Body Large&quot;, style = MaterialTheme.typography.bodyLarge)&#10;        Text(&quot;Body Medium&quot;, style = MaterialTheme.typography.bodyMedium)&#10;        Text(&quot;Label Small&quot;, style = MaterialTheme.typography.labelSmall)&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun MaterialComponentsShowcase() {&#10;    Column(&#10;        modifier = Modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Composants Material3&quot;,&#10;            style = MaterialTheme.typography.headlineSmall&#10;        )&#10;&#10;        Button(onClick = {}) {&#10;            Text(&quot;Button Primary&quot;)&#10;        }&#10;&#10;        OutlinedButton(onClick = {}) {&#10;            Text(&quot;Outlined Button&quot;)&#10;        }&#10;&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&#10;                text = &quot;Ceci est une Card Material3&quot;,&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;&#10;        OutlinedTextField(&#10;            value = &quot;Exemple de texte&quot;,&#10;            onValueChange = {},&#10;            label = { Text(&quot;TextField&quot;) }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.theme&#10;&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;// Couleurs modernes et vibrants&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Color(0xFF6366F1), // Indigo moderne&#10;    onPrimary = Color.White,&#10;    primaryContainer = Color(0xFFE0E7FF),&#10;    onPrimaryContainer = Color(0xFF312E81),&#10;    secondary = Color(0xFF10B981), // Emerald&#10;    onSecondary = Color.White,&#10;    secondaryContainer = Color(0xFFD1FAE5),&#10;    onSecondaryContainer = Color(0xFF064E3B),&#10;    tertiary = Color(0xFFF59E0B), // Amber&#10;    onTertiary = Color.White,&#10;    surface = Color(0xFFFAFAFA),&#10;    onSurface = Color(0xFF1F2937),&#10;    surfaceVariant = Color(0xFFF3F4F6),&#10;    onSurfaceVariant = Color(0xFF6B7280),&#10;    background = Color(0xFFFFFBFE),&#10;    onBackground = Color(0xFF1F2937),&#10;    error = Color(0xFFEF4444),&#10;    onError = Color.White,&#10;    outline = Color(0xFFD1D5DB)&#10;)&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Color(0xFF818CF8), // Indigo clair&#10;    onPrimary = Color(0xFF1E1B4B),&#10;    primaryContainer = Color(0xFF3730A3),&#10;    onPrimaryContainer = Color(0xFFE0E7FF),&#10;    secondary = Color(0xFF34D399), // Emerald clair&#10;    onSecondary = Color(0xFF022C22),&#10;    secondaryContainer = Color(0xFF047857),&#10;    onSecondaryContainer = Color(0xFFD1FAE5),&#10;    tertiary = Color(0xFFFBBF24), // Amber clair&#10;    onTertiary = Color(0xFF92400E),&#10;    surface = Color(0xFF111827),&#10;    onSurface = Color(0xFFE5E7EB),&#10;    surfaceVariant = Color(0xFF1F2937),&#10;    onSurfaceVariant = Color(0xFF9CA3AF),&#10;    background = Color(0xFF0F172A),&#10;    onBackground = Color(0xFFE5E7EB),&#10;    error = Color(0xFFF87171),&#10;    onError = Color(0xFF7F1D1D),&#10;    outline = Color(0xFF374151)&#10;)&#10;&#10;@Composable&#10;fun ClimatScopeTheme(&#10;    darkTheme: Boolean = false,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = if (darkTheme) DarkColorScheme else LightColorScheme&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}&#10;&#10;// ========== THEME PREVIEWS ==========&#10;&#10;@Preview(&#10;    name = &quot;Colors - Light Theme&quot;,&#10;    showBackground = true,&#10;    widthDp = 360,&#10;    heightDp = 400&#10;)&#10;@Composable&#10;private fun LightThemeColorsPreview() {&#10;    ClimatScopeTheme(darkTheme = false) {&#10;        ThemeColorsPalette()&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Colors - Dark Theme&quot;,&#10;    showBackground = true,&#10;    widthDp = 360,&#10;    heightDp = 400,&#10;    uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES&#10;)&#10;@Composable&#10;private fun DarkThemeColorsPreview() {&#10;    ClimatScopeTheme(darkTheme = true) {&#10;        ThemeColorsPalette()&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Typography&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun TypographyPreview() {&#10;    ClimatScopeTheme {&#10;        TypographyShowcase()&#10;    }&#10;}&#10;&#10;@Preview(&#10;    name = &quot;Material Components&quot;,&#10;    showBackground = true&#10;)&#10;@Composable&#10;private fun MaterialComponentsPreview() {&#10;    ClimatScopeTheme {&#10;        MaterialComponentsShowcase()&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ThemeColorsPalette() {&#10;    Column(&#10;        modifier = Modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Palette de Couleurs&quot;,&#10;            style = MaterialTheme.typography.headlineSmall&#10;        )&#10;&#10;        ColorCard(&quot;Primary&quot;, MaterialTheme.colorScheme.primary, MaterialTheme.colorScheme.onPrimary)&#10;        ColorCard(&quot;Secondary&quot;, MaterialTheme.colorScheme.secondary, MaterialTheme.colorScheme.onSecondary)&#10;        ColorCard(&quot;Surface&quot;, MaterialTheme.colorScheme.surface, MaterialTheme.colorScheme.onSurface)&#10;        ColorCard(&quot;Background&quot;, MaterialTheme.colorScheme.background, MaterialTheme.colorScheme.onBackground)&#10;        ColorCard(&quot;Error&quot;, MaterialTheme.colorScheme.error, MaterialTheme.colorScheme.onError)&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ColorCard(name: String, backgroundColor: Color, contentColor: Color) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth().height(60.dp),&#10;        colors = CardDefaults.cardColors(containerColor = backgroundColor)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize().padding(16.dp),&#10;            contentAlignment = androidx.compose.ui.Alignment.CenterStart&#10;        ) {&#10;            Text(&#10;                text = name,&#10;                color = contentColor,&#10;                style = MaterialTheme.typography.bodyLarge&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TypographyShowcase() {&#10;    Column(&#10;        modifier = Modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Text(&quot;Display Large&quot;, style = MaterialTheme.typography.displayLarge)&#10;        Text(&quot;Headline Large&quot;, style = MaterialTheme.typography.headlineLarge)&#10;        Text(&quot;Title Large&quot;, style = MaterialTheme.typography.titleLarge)&#10;        Text(&quot;Body Large&quot;, style = MaterialTheme.typography.bodyLarge)&#10;        Text(&quot;Body Medium&quot;, style = MaterialTheme.typography.bodyMedium)&#10;        Text(&quot;Label Small&quot;, style = MaterialTheme.typography.labelSmall)&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun MaterialComponentsShowcase() {&#10;    Column(&#10;        modifier = Modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Composants Material3&quot;,&#10;            style = MaterialTheme.typography.headlineSmall&#10;        )&#10;&#10;        Button(onClick = {}) {&#10;            Text(&quot;Button Primary&quot;)&#10;        }&#10;&#10;        OutlinedButton(onClick = {}) {&#10;            Text(&quot;Outlined Button&quot;)&#10;        }&#10;&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&#10;                text = &quot;Ceci est une Card Material3&quot;,&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;&#10;        OutlinedTextField(&#10;            value = &quot;Exemple de texte&quot;,&#10;            onValueChange = {},&#10;            label = { Text(&quot;TextField&quot;) }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/viewmodels/CityViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/presentation/viewmodels/CityViewModel.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.myapp.climatscope.presentation.viewmodels&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.myapp.climatscope.domain.entities.City&#10;import com.myapp.climatscope.domain.usecases.CreateCityUseCase&#10;import com.myapp.climatscope.domain.usecases.DeleteCityUseCase&#10;import com.myapp.climatscope.domain.usecases.GetAllCitiesUseCase&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;data class CityUiState(&#10;    val cities: List&lt;City&gt; = emptyList(),&#10;    val currentCity: City? = null,&#10;    val isLoading: Boolean = false,&#10;    val errorMessage: String? = null&#10;)&#10;&#10;class CityViewModel(&#10;    private val getAllCitiesUseCase: GetAllCitiesUseCase,&#10;    private val createCityUseCase: CreateCityUseCase,&#10;    private val deleteCityUseCase: DeleteCityUseCase&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(CityUiState())&#10;    val uiState: StateFlow&lt;CityUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadCities()&#10;    }&#10;&#10;    fun loadCities() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, errorMessage = null)&#10;            try {&#10;                val cities = getAllCitiesUseCase()&#10;                _uiState.value = _uiState.value.copy(&#10;                    cities = cities,&#10;                    isLoading = false&#10;                )&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    errorMessage = e.message ?: &quot;Erreur lors du chargement des villes&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun createCity(cityName: String) {&#10;        if (cityName.isBlank()) return&#10;&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, errorMessage = null)&#10;            try {&#10;                val success = createCityUseCase(cityName.trim())&#10;                if (success) {&#10;                    loadCities() // Reload cities after creation&#10;                } else {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        errorMessage = &quot;Erreur lors de la création de la ville&quot;&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    errorMessage = e.message ?: &quot;Erreur lors de la création de la ville&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteCity(city: City) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, errorMessage = null)&#10;            try {&#10;                val success = deleteCityUseCase(city)&#10;                if (success) {&#10;                    loadCities() // Reload cities after deletion&#10;                } else {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        errorMessage = &quot;Erreur lors de la suppression de la ville&quot;&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    errorMessage = e.message ?: &quot;Erreur lors de la suppression de la ville&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun setCurrentCity(city: City) {&#10;        _uiState.value = _uiState.value.copy(currentCity = city)&#10;    }&#10;&#10;    fun removeCity(city: City) {&#10;        deleteCity(city)&#10;    }&#10;&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(errorMessage = null)&#10;    }&#10;}&#10;&#10;class CityViewModelFactory(&#10;    private val getAllCitiesUseCase: GetAllCitiesUseCase,&#10;    private val createCityUseCase: CreateCityUseCase,&#10;    private val deleteCityUseCase: DeleteCityUseCase&#10;) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(CityViewModel::class.java)) {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            return CityViewModel(getAllCitiesUseCase, createCityUseCase, deleteCityUseCase) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/weather/WeatherFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/myapp/climatscope/weather/WeatherFragment.kt" />
              <option name="originalContent" value="package com.myapp.climatscope.weather&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;import coil.load&#10;import com.myapp.climatscope.App&#10;import com.myapp.climatscope.R&#10;import com.myapp.climatscope.openweathermap.WeatherWrapper&#10;import com.myapp.climatscope.openweathermap.mapOpenWeatherDataToWeather&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;&#10;class WeatherFragment : Fragment() {&#10;&#10;    private val TAG = WeatherFragment::class.java.simpleName&#10;    private lateinit var cityName : String&#10;&#10;    private lateinit var weatherIcon: ImageView&#10;    private lateinit var weatherDescription: TextView&#10;    private lateinit var temperature: TextView&#10;    private lateinit var humidity: TextView&#10;    private lateinit var pressure: TextView&#10;    private lateinit var city: TextView&#10;    private lateinit var refreshLayout: SwipeRefreshLayout&#10;    companion object {&#10;&#10;        val EXTRA_CITY_NAME = &quot;EXTRA_CITY&quot;&#10;        fun newInstance()= WeatherFragment()&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_weather, container, false)&#10;&#10;        refreshLayout = view.findViewById(R.id.swipe_refresh_layout)&#10;        city = view.findViewById(R.id.city)&#10;        weatherIcon = view.findViewById(R.id.weather_icon)&#10;        weatherDescription = view.findViewById(R.id.weather_description)&#10;        temperature = view.findViewById(R.id.temperature)&#10;        humidity = view.findViewById(R.id.humidity)&#10;        pressure = view.findViewById(R.id.pressure)&#10;&#10;        refreshLayout.setOnRefreshListener { refreshWeather() }&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        if (activity?.intent!!.hasExtra(EXTRA_CITY_NAME)){&#10;            requireActivity().intent.getStringExtra(EXTRA_CITY_NAME)&#10;                ?.let { updateWeatherForCity(it) }&#10;        }&#10;    }&#10;&#10;    fun updateWeatherForCity(cityName: String) {&#10;        this.cityName = cityName&#10;        val call= App.weatherService.getWeather(&quot;$cityName,fr&quot;)&#10;&#10;        if (!refreshLayout.isRefreshing) {&#10;            refreshLayout.isRefreshing = true&#10;        }&#10;        call.enqueue(object :Callback&lt;WeatherWrapper&gt;{&#10;            override fun onResponse(&#10;                call: Call&lt;WeatherWrapper&gt;,&#10;                response: Response&lt;WeatherWrapper&gt;&#10;            ) {&#10;                response.body()?.let {&#10;                    val weather = mapOpenWeatherDataToWeather(it)&#10;                    city.text = cityName&#10;                    updateWeatherUi(weather)&#10;                    refreshLayout.isRefreshing = false&#10;                    Log.i(TAG, &quot;Weather response: $weather&quot;)&#10;                }&#10;&#10;            }&#10;&#10;            override fun onFailure(call: Call&lt;WeatherWrapper&gt;, t: Throwable) {&#10;                Log.e(TAG, &quot;onFailure: &quot;, t)&#10;                refreshLayout.isRefreshing = false&#10;                Toast.makeText(context, &quot;Error, Could not load City weather&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;&#10;        })&#10;    }&#10;&#10;    private fun updateWeatherUi(weather: Weather) {&#10;        weatherDescription.text = weather.description&#10;        temperature.text =&#10;            getString(R.string.weather_temperature_value, weather.temperature.toInt())&#10;        humidity.text = getString(R.string.weather_humidity_value, weather.humidity)&#10;        pressure.text = getString(R.string.weather_pressure_value, weather.pressure)&#10;        weatherIcon.load(weather.iconUrl) {&#10;            placeholder(R.drawable.ic_launcher_foreground)&#10;            fallback(R.drawable.ic_launcher_background)&#10;        }&#10;        //Log.e(TAG, &quot;updateWeatherUi: &quot;, )&#10;    }&#10;&#10;    private fun refreshWeather() {&#10;        updateWeatherForCity(cityName)&#10;    }&#10;&#10;    fun clearUi() {&#10;        weatherIcon.setImageResource(R.mipmap.ic_launcher)&#10;        cityName = &quot;&quot;&#10;        city.text = &quot;&quot;&#10;        weatherDescription.text = &quot;&quot;&#10;        temperature.text = &quot;&quot;&#10;        humidity.text = &quot;&quot;&#10;        pressure.text = &quot;&quot;&#10;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.myapp.climatscope.weather&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;import coil.load&#10;import com.myapp.climatscope.App&#10;import com.myapp.climatscope.R&#10;import com.myapp.climatscope.domain.entities.Weather&#10;import com.myapp.climatscope.presentation.viewmodels.WeatherViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;class WeatherFragment : Fragment() {&#10;&#10;    private lateinit var weatherIcon: ImageView&#10;    private lateinit var weatherDescription: TextView&#10;    private lateinit var temperature: TextView&#10;    private lateinit var humidity: TextView&#10;    private lateinit var pressure: TextView&#10;    private lateinit var city: TextView&#10;    private lateinit var refreshLayout: SwipeRefreshLayout&#10;&#10;    private val viewModel: WeatherViewModel by viewModels {&#10;        (requireActivity().application as App).dependencyContainer.weatherViewModelFactory&#10;    }&#10;&#10;    companion object {&#10;        const val EXTRA_CITY_NAME = &quot;EXTRA_CITY&quot;&#10;        fun newInstance() = WeatherFragment()&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_weather, container, false)&#10;&#10;        refreshLayout = view.findViewById(R.id.swipe_refresh_layout)&#10;        city = view.findViewById(R.id.city)&#10;        weatherIcon = view.findViewById(R.id.weather_icon)&#10;        weatherDescription = view.findViewById(R.id.weather_description)&#10;        temperature = view.findViewById(R.id.temperature)&#10;        humidity = view.findViewById(R.id.humidity)&#10;        pressure = view.findViewById(R.id.pressure)&#10;&#10;        refreshLayout.setOnRefreshListener {&#10;            viewModel.refreshWeather()&#10;        }&#10;&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        observeViewModel()&#10;&#10;        // Handle intent extra for city name&#10;        if (activity?.intent?.hasExtra(EXTRA_CITY_NAME) == true) {&#10;            requireActivity().intent.getStringExtra(EXTRA_CITY_NAME)&#10;                ?.let { cityName -&gt;&#10;                    viewModel.loadWeatherForCity(cityName)&#10;                }&#10;        }&#10;    }&#10;&#10;    private fun observeViewModel() {&#10;        viewLifecycleOwner.lifecycleScope.launch {&#10;            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                viewModel.uiState.collect { uiState -&gt;&#10;                    // Update loading state&#10;                    refreshLayout.isRefreshing = uiState.isLoading&#10;&#10;                    // Update city name&#10;                    city.text = uiState.cityName&#10;&#10;                    // Update weather UI&#10;                    uiState.weather?.let { weather -&gt;&#10;                        updateWeatherUi(weather)&#10;                    }&#10;&#10;                    // Handle errors&#10;                    uiState.errorMessage?.let { message -&gt;&#10;                        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()&#10;                        viewModel.clearError()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateWeatherForCity(cityName: String) {&#10;        viewModel.loadWeatherForCity(cityName)&#10;    }&#10;&#10;    fun clearUi() {&#10;        viewModel.clearWeather()&#10;        city.text = &quot;&quot;&#10;        weatherDescription.text = &quot;&quot;&#10;        temperature.text = &quot;&quot;&#10;        humidity.text = &quot;&quot;&#10;        pressure.text = &quot;&quot;&#10;        weatherIcon.setImageDrawable(null)&#10;    }&#10;&#10;    private fun updateWeatherUi(weather: Weather) {&#10;        weatherDescription.text = weather.description&#10;        temperature.text = getString(R.string.weather_temperature_value, weather.temperature.toInt())&#10;        humidity.text = getString(R.string.weather_humidity_value, weather.humidity)&#10;        pressure.text = getString(R.string.weather_pressure_value, weather.pressure)&#10;        weatherIcon.load(weather.iconUrl)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_city.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_city.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    tools:context=&quot;.city.CityActivity&quot;&gt;&#10;&#10;    &lt;androidx.fragment.app.FragmentContainerView&#10;        android:id=&quot;@+id/fragment_city&quot;&#10;        android:name=&quot;com.myapp.climatscope.city.CityFragment&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fitsSystemWindows=&quot;true&quot;&#10;    tools:context=&quot;.city.CityActivity&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:fitsSystemWindows=&quot;true&quot;&gt;&#10;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorPrimary&quot;&#10;            app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;&#10;            app:title=&quot;Mes Villes&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.fragment.app.FragmentContainerView&#10;        android:id=&quot;@+id/fragment_city&quot;&#10;        android:name=&quot;com.myapp.climatscope.city.CityFragment&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>